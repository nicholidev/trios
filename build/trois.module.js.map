{"version":3,"file":"trois.module.js","sources":["../src/core/useRaycaster.ts","../src/core/usePointer.ts","../src/core/useThree.ts","../src/core/Renderer.ts","../src/tools.ts","../src/core/Camera.ts","../src/core/OrthographicCamera.ts","../src/core/PerspectiveCamera.ts","../src/core/Scene.ts","../src/core/Object3D.ts","../src/core/Group.ts","../src/core/Raycaster.ts","../src/core/CubeCamera.ts","../src/meshes/Mesh.ts","../src/geometries/Geometry.ts","../src/geometries/BoxGeometry.ts","../src/geometries/CircleGeometry.ts","../src/geometries/ConeGeometry.ts","../src/geometries/CylinderGeometry.ts","../src/geometries/DodecahedronGeometry.ts","../src/geometries/IcosahedronGeometry.ts","../src/geometries/LatheGeometry.ts","../src/geometries/OctahedronGeometry.ts","../src/geometries/PlaneGeometry.ts","../src/geometries/PolyhedronGeometry.ts","../src/geometries/RingGeometry.ts","../src/geometries/SphereGeometry.ts","../src/geometries/TetrahedronGeometry.ts","../src/geometries/TorusGeometry.ts","../src/geometries/TorusKnotGeometry.ts","../src/geometries/TubeGeometry.ts","../src/lights/Light.ts","../src/lights/AmbientLight.ts","../src/lights/DirectionalLight.ts","../src/lights/HemisphereLight.ts","../src/lights/PointLight.ts","../src/lights/RectAreaLight.ts","../src/lights/SpotLight.ts","../src/materials/Material.ts","../src/materials/BasicMaterial.ts","../src/materials/LambertMaterial.ts","../src/materials/MatcapMaterial.ts","../src/materials/PhongMaterial.ts","../src/materials/StandardMaterial.ts","../src/materials/PhysicalMaterial.ts","../src/materials/ShaderMaterial.ts","../src/materials/SubsurfaceScatteringShader.ts","../src/materials/SubSurfaceMaterial.ts","../src/materials/ToonMaterial.ts","../src/materials/Texture.ts","../src/materials/CubeTexture.ts","../src/meshes/Box.ts","../src/meshes/Circle.ts","../src/meshes/Cone.ts","../src/meshes/Cylinder.ts","../src/meshes/Dodecahedron.ts","../src/meshes/Icosahedron.ts","../src/meshes/Lathe.ts","../src/meshes/Octahedron.ts","../src/meshes/Plane.ts","../src/meshes/Polyhedron.ts","../src/meshes/Ring.ts","../src/meshes/Sphere.ts","../src/meshes/Tetrahedron.ts","../src/meshes/Text.ts","../src/meshes/Torus.ts","../src/meshes/TorusKnot.ts","../src/meshes/Tube.ts","../src/meshes/Image.ts","../src/meshes/InstancedMesh.ts","../src/meshes/Sprite.ts","../src/models/Model.ts","../src/models/GLTF.ts","../src/models/FBX.ts","../src/effects/EffectComposer.ts","../src/effects/EffectPass.ts","../src/effects/RenderPass.ts","../src/effects/BokehPass.ts","../src/effects/FilmPass.ts","../src/effects/FXAAPass.ts","../src/effects/HalftonePass.ts","../src/effects/SMAAPass.ts","../src/effects/SSAOPass.ts","../src/shaders/default.ts","../src/shaders/TiltShift.ts","../src/effects/TiltShiftPass.ts","../src/effects/UnrealBloomPass.ts","../src/shaders/ZoomBlur.ts","../src/effects/ZoomBlurPass.ts","../src/plugin.ts","../src/use/useTextures.ts"],"sourcesContent":["import { Camera, Intersection, Plane, Raycaster, Vector2, Vector3 } from 'three'\nimport { IntersectObject } from './usePointer'\n\nexport interface RaycasterInterface {\n  position: Vector3\n  updatePosition(coords: Vector2): void\n  intersect(coords: Vector2, objects: IntersectObject[]): Intersection[],\n}\n\nexport interface RaycasterConfigInterface {\n  camera: Camera\n  resetPosition?: Vector3\n}\n\nexport default function useRaycaster(options: RaycasterConfigInterface): RaycasterInterface {\n  const {\n    camera,\n    resetPosition = new Vector3(0, 0, 0),\n  } = options\n\n  const raycaster = new Raycaster()\n  const position = resetPosition.clone()\n  const plane = new Plane(new Vector3(0, 0, 1), 0)\n\n  const updatePosition = (coords: Vector2) => {\n    raycaster.setFromCamera(coords, camera)\n    camera.getWorldDirection(plane.normal)\n    raycaster.ray.intersectPlane(plane, position)\n  }\n\n  const intersect = (coords: Vector2, objects: IntersectObject[]) => {\n    raycaster.setFromCamera(coords, camera)\n    return raycaster.intersectObjects(objects)\n  }\n\n  return {\n    position,\n    updatePosition,\n    intersect,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { Camera, InstancedMesh, Intersection, Mesh, Vector2, Vector3 } from 'three'\nimport useRaycaster from './useRaycaster'\n\nexport interface PointerEventInterface {\n  type: 'pointerenter' | 'pointermove' | 'pointerleave' | 'click'\n  position?: Vector2\n  positionN?: Vector2\n  positionV3?: Vector3\n}\n\nexport interface PointerIntersectEventInterface {\n  type: 'pointerenter' | 'pointerover' | 'pointermove' | 'pointerleave' | 'click'\n  component: any\n  over?: boolean\n  intersect?: Intersection\n}\n\nexport type PointerCallbackType = (e: PointerEventInterface) => void\nexport type PointerIntersectCallbackType = (e: PointerIntersectEventInterface) => void\nexport type IntersectObject = Mesh | InstancedMesh\n\nexport interface PointerPublicConfigInterface {\n  intersectMode?: 'frame'\n  touch?: boolean\n  resetOnEnd?: boolean\n  resetPosition?: Vector2\n  resetPositionV3?: Vector3\n  onEnter?: PointerCallbackType\n  onMove?: PointerCallbackType\n  onLeave?: PointerCallbackType\n  onClick?: PointerCallbackType\n  onIntersectEnter?: PointerIntersectCallbackType\n  onIntersectOver?: PointerIntersectCallbackType\n  onIntersectMove?: PointerIntersectCallbackType\n  onIntersectLeave?: PointerIntersectCallbackType\n  onIntersectClick?: PointerIntersectCallbackType\n}\n\nexport interface PointerConfigInterface extends PointerPublicConfigInterface {\n  camera: Camera\n  domElement: HTMLCanvasElement\n  intersectObjects: IntersectObject[]\n}\n\nexport interface PointerInterface {\n  position: Vector2\n  positionN: Vector2\n  positionV3: Vector3\n  intersectObjects: IntersectObject[]\n  listeners: boolean\n  addListeners(cb: void): void\n  removeListeners(cb: void): void\n  intersect(): void\n}\n\nexport default function usePointer(options: PointerConfigInterface): PointerInterface {\n  const {\n    camera,\n    domElement,\n    intersectObjects,\n    touch = true,\n    resetOnEnd = false,\n    resetPosition = new Vector2(0, 0),\n    resetPositionV3 = new Vector3(0, 0, 0),\n    onEnter = () => {},\n    onMove = () => {},\n    onLeave = () => {},\n    onClick = () => {},\n    onIntersectEnter = () => {},\n    onIntersectOver = () => {},\n    onIntersectMove = () => {},\n    onIntersectLeave = () => {},\n    onIntersectClick = () => {},\n  } = options\n\n  const position = resetPosition.clone()\n  const positionN = new Vector2(0, 0)\n\n  const raycaster = useRaycaster({ camera })\n  const positionV3 = raycaster.position\n\n  const obj: PointerInterface = {\n    position,\n    positionN,\n    positionV3,\n    intersectObjects,\n    listeners: false,\n    addListeners,\n    removeListeners,\n    intersect,\n  }\n\n  return obj\n\n  function reset() {\n    position.copy(resetPosition)\n    positionV3.copy(resetPositionV3)\n  }\n\n  function updatePosition(event: TouchEvent | MouseEvent) {\n    let x, y\n    if (event instanceof TouchEvent && event.touches && event.touches.length > 0) {\n      x = (<TouchEvent>event).touches[0].clientX\n      y = (<TouchEvent>event).touches[0].clientY\n    } else {\n      x = (<MouseEvent>event).clientX\n      y = (<MouseEvent>event).clientY\n    }\n\n    const rect = domElement.getBoundingClientRect()\n    position.x = x - rect.left\n    position.y = y - rect.top\n    positionN.x = (position.x / rect.width) * 2 - 1\n    positionN.y = -(position.y / rect.height) * 2 + 1\n    raycaster.updatePosition(positionN)\n  }\n\n  function intersect() {\n    if (intersectObjects.length) {\n      const intersects = raycaster.intersect(positionN, intersectObjects)\n      const offObjects: IntersectObject[] = [...intersectObjects]\n      const iMeshes: InstancedMesh[] = []\n\n      intersects.forEach(intersect => {\n        const { object } = intersect\n        const { component } = object.userData\n\n        // only once for InstancedMesh\n        if (object instanceof InstancedMesh) {\n          if (iMeshes.indexOf(object) !== -1) return\n          iMeshes.push(object)\n        }\n\n        if (!object.userData.over) {\n          object.userData.over = true\n          const overEvent: PointerIntersectEventInterface = { type: 'pointerover', over: true, component, intersect }\n          const enterEvent: PointerIntersectEventInterface = { ...overEvent, type: 'pointerenter' }\n          onIntersectOver(overEvent)\n          onIntersectEnter(enterEvent)\n          component.onPointerOver?.(overEvent)\n          component.onPointerEnter?.(enterEvent)\n        }\n\n        const moveEvent: PointerIntersectEventInterface = { type: 'pointermove', component, intersect }\n        onIntersectMove(moveEvent)\n        component.onPointerMove?.(moveEvent)\n\n        offObjects.splice(offObjects.indexOf((<IntersectObject>object)), 1)\n      })\n\n      offObjects.forEach(object => {\n        const { component } = object.userData\n        if (object.userData.over) {\n          object.userData.over = false\n          const overEvent: PointerIntersectEventInterface = { type: 'pointerover', over: false, component }\n          const leaveEvent: PointerIntersectEventInterface = { ...overEvent, type: 'pointerleave' }\n          onIntersectOver(overEvent)\n          onIntersectLeave(leaveEvent)\n          component.onPointerOver?.(overEvent)\n          component.onPointerLeave?.(leaveEvent)\n        }\n      })\n    }\n  }\n\n  function pointerEnter(event: TouchEvent | MouseEvent) {\n    updatePosition(event)\n    onEnter({ type: 'pointerenter', position, positionN, positionV3 })\n  }\n\n  function pointerMove(event: TouchEvent | MouseEvent) {\n    updatePosition(event)\n    onMove({ type: 'pointermove', position, positionN, positionV3 })\n    intersect()\n  }\n\n  function pointerClick(event: TouchEvent | MouseEvent) {\n    updatePosition(event)\n    if (intersectObjects.length) {\n      const intersects = raycaster.intersect(positionN, intersectObjects)\n      const iMeshes: InstancedMesh[] = []\n      intersects.forEach(intersect => {\n        const { object } = intersect\n        const { component } = object.userData\n\n        // only once for InstancedMesh\n        if (object instanceof InstancedMesh) {\n          if (iMeshes.indexOf(object) !== -1) return\n          iMeshes.push(object)\n        }\n\n        const event: PointerIntersectEventInterface = { type: 'click', component, intersect }\n        onIntersectClick(event)\n        component.onClick?.(event)\n      })\n    }\n    onClick({ type: 'click', position, positionN, positionV3 })\n  }\n\n  function pointerLeave() {\n    if (resetOnEnd) reset()\n    onLeave({ type: 'pointerleave' })\n  }\n\n  function addListeners() {\n    domElement.addEventListener('mouseenter', pointerEnter)\n    domElement.addEventListener('mousemove', pointerMove)\n    domElement.addEventListener('mouseleave', pointerLeave)\n    domElement.addEventListener('click', pointerClick)\n    if (touch) {\n      domElement.addEventListener('touchstart', pointerEnter)\n      domElement.addEventListener('touchmove', pointerMove)\n      domElement.addEventListener('touchend', pointerLeave)\n    }\n    obj.listeners = true\n  }\n\n  function removeListeners() {\n    domElement.removeEventListener('mouseenter', pointerEnter)\n    domElement.removeEventListener('mousemove', pointerMove)\n    domElement.removeEventListener('mouseleave', pointerLeave)\n    domElement.removeEventListener('click', pointerClick)\n\n    domElement.removeEventListener('touchstart', pointerEnter)\n    domElement.removeEventListener('touchmove', pointerMove)\n    domElement.removeEventListener('touchend', pointerLeave)\n    obj.listeners = false\n  }\n}\n","import { Camera, OrthographicCamera, PerspectiveCamera, Scene, WebGLRenderer } from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport usePointer, { IntersectObject, PointerConfigInterface, PointerPublicConfigInterface, PointerInterface } from './usePointer'\n\nexport interface SizeInterface {\n  width: number\n  height: number\n  wWidth: number\n  wHeight: number\n  ratio: number\n}\n\nexport interface ThreeConfigInterface {\n  canvas?: HTMLCanvasElement\n  antialias: boolean\n  alpha: boolean\n  autoClear: boolean\n  orbitCtrl: boolean | Record<string, unknown>\n  pointer: boolean | PointerPublicConfigInterface\n  resize: boolean | string\n  width?: number\n  height?: number\n  onResize?(size: SizeInterface): void\n  [index:string]: any\n}\n\nexport interface ThreeInterface {\n  config: ThreeConfigInterface\n  renderer: WebGLRenderer\n  composer?: EffectComposer\n  camera?: Camera\n  cameraCtrl?: OrbitControls\n  scene?: Scene\n  pointer?: PointerInterface\n  size: SizeInterface\n  init(): boolean\n  dispose(): void\n  render(): void\n  renderC(): void\n  setSize(width: number, height: number): void\n  addIntersectObject(o: IntersectObject): void\n  removeIntersectObject(o: IntersectObject): void\n}\n\n/**\n * Three.js helper\n */\nexport default function useThree(params: ThreeConfigInterface): ThreeInterface {\n  // default config\n  const config: ThreeConfigInterface = {\n    antialias: true,\n    alpha: false,\n    autoClear: true,\n    orbitCtrl: false,\n    pointer: false,\n    resize: false,\n    width: 300,\n    height: 150,\n  }\n\n  if (params) {\n    Object.entries(params).forEach(([key, value]) => {\n      config[key] = value\n    })\n  }\n\n  // size\n  const size: SizeInterface = {\n    width: 1, height: 1,\n    wWidth: 1, wHeight: 1,\n    ratio: 1,\n  }\n\n  const beforeRenderCallbacks: {(): void}[] = []\n\n  const intersectObjects: IntersectObject[] = []\n\n  const renderer = createRenderer()\n\n  // returned object\n  const obj: ThreeInterface = {\n    config,\n    renderer,\n    size,\n    init,\n    dispose,\n    render,\n    renderC,\n    setSize,\n    addIntersectObject, removeIntersectObject,\n  }\n\n  return obj\n\n  /**\n   * create WebGLRenderer\n   */\n  function createRenderer(): WebGLRenderer {\n    const renderer = new WebGLRenderer({ canvas: config.canvas, antialias: config.antialias, alpha: config.alpha })\n    renderer.autoClear = config.autoClear\n    return renderer\n  }\n\n  /**\n   * init three\n   */\n  function init() {\n    if (!obj.scene) {\n      console.error('Missing Scene')\n      return false\n    }\n\n    if (!obj.camera) {\n      console.error('Missing Camera')\n      return false\n    }\n\n    if (config.resize) {\n      onResize()\n      window.addEventListener('resize', onResize)\n    } else if (config.width && config.height) {\n      setSize(config.width, config.height)\n    }\n\n    initPointer()\n\n    if (config.orbitCtrl) {\n      const cameraCtrl = new OrbitControls(obj.camera, obj.renderer.domElement)\n      if (config.orbitCtrl instanceof Object) {\n        Object.entries(config.orbitCtrl).forEach(([key, value]) => {\n          // @ts-ignore\n          cameraCtrl[key] = value\n        })\n      }\n      onBeforeRender(() => { cameraCtrl.update() })\n      obj.cameraCtrl = cameraCtrl\n    }\n\n    return true\n  }\n\n  /**\n   * init pointer\n   */\n  function initPointer() {\n    let pointerConf: PointerConfigInterface = {\n      camera: obj.camera!,\n      domElement: obj.renderer!.domElement,\n      intersectObjects,\n    }\n\n    if (config.pointer && config.pointer instanceof Object) {\n      pointerConf = { ...pointerConf, ...config.pointer }\n    }\n\n    const pointer = obj.pointer = usePointer(pointerConf)\n    if (config.pointer || intersectObjects.length) {\n      pointer.addListeners()\n      if (pointerConf.intersectMode === 'frame') {\n        onBeforeRender(pointer.intersect)\n      }\n    }\n  }\n\n  /**\n   * add before render callback\n   */\n  function onBeforeRender(cb: {(): void}) {\n    beforeRenderCallbacks.push(cb)\n  }\n\n  /**\n   * default render\n   */\n  function render() {\n    // if (obj.cameraCtrl) obj.cameraCtrl.update()\n    beforeRenderCallbacks.forEach(c => c())\n    obj.renderer!.render(obj.scene!, obj.camera!)\n  }\n\n  /**\n   * composer render\n   */\n  function renderC() {\n    // if (obj.cameraCtrl) obj.cameraCtrl.update()\n    beforeRenderCallbacks.forEach(c => c())\n    obj.composer!.render()\n  }\n\n  /**\n   * add intersect object\n   */\n  function addIntersectObject(o: IntersectObject) {\n    if (intersectObjects.indexOf(o) === -1) {\n      intersectObjects.push(o)\n    }\n    // add listeners if needed\n    if (obj.pointer && !obj.pointer.listeners) {\n      obj.pointer.addListeners()\n    }\n  }\n\n  /**\n   * remove intersect object\n   */\n  function removeIntersectObject(o: IntersectObject) {\n    const i = intersectObjects.indexOf(o)\n    if (i !== -1) {\n      intersectObjects.splice(i, 1)\n    }\n    // remove listeners if needed\n    if (obj.pointer && !config.pointer && intersectObjects.length === 0) {\n      obj.pointer.removeListeners()\n    }\n  }\n\n  /**\n   * remove listeners and dispose\n   */\n  function dispose() {\n    // beforeRenderCallbacks = []\n    window.removeEventListener('resize', onResize)\n    if (obj.pointer) obj.pointer.removeListeners()\n    if (obj.cameraCtrl) obj.cameraCtrl.dispose()\n    if (obj.renderer) obj.renderer.dispose()\n  }\n\n  /**\n   * resize listener\n   */\n  function onResize() {\n    if (config.resize === 'window') {\n      setSize(window.innerWidth, window.innerHeight)\n    } else {\n      const elt = obj.renderer!.domElement.parentNode as Element\n      if (elt) setSize(elt.clientWidth, elt.clientHeight)\n    }\n    config.onResize?.(size)\n  }\n\n  /**\n   * update renderer size and camera\n   */\n  function setSize(width: number, height: number) {\n    size.width = width\n    size.height = height\n    size.ratio = width / height\n\n    obj.renderer!.setSize(width, height, false)\n\n    // already done in EffectComposer\n    // if (obj.composer) {\n    //   obj.composer.setSize(width, height)\n    // }\n\n    const camera = (<Camera>obj.camera!)\n    if (camera.type === 'PerspectiveCamera') {\n      const pCamera = (<PerspectiveCamera>camera)\n      pCamera.aspect = size.ratio\n      pCamera.updateProjectionMatrix()\n    }\n\n    if (camera.type === 'OrthographicCamera') {\n      const oCamera = (<OrthographicCamera>camera)\n      size.wWidth = oCamera.right - oCamera.left\n      size.wHeight = oCamera.top - oCamera.bottom\n    } else {\n      const wsize = getCameraSize()\n      size.wWidth = wsize[0]\n      size.wHeight = wsize[1]\n    }\n  }\n\n  /**\n   * calculate camera visible area size\n   */\n  function getCameraSize() {\n    const camera = (<PerspectiveCamera>obj.camera!)\n    const vFOV = (camera.fov * Math.PI) / 180\n    const h = 2 * Math.tan(vFOV / 2) * Math.abs(camera.position.z)\n    const w = h * camera.aspect\n    return [w, h]\n  }\n}\n","/* eslint-disable no-use-before-define */\nimport { Camera, Scene, WebGLRenderer } from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { defineComponent, InjectionKey, PropType } from 'vue'\nimport { PointerPublicConfigInterface } from './usePointer'\nimport useThree, { SizeInterface, ThreeConfigInterface, ThreeInterface } from './useThree'\n\ntype CallbackType<T> = (event: T) => void\n\n// type EventType = 'init' | 'mounted' | 'beforerender' | 'afterrender' | 'resize'\n\nexport interface EventInterface {\n  type: 'init' | 'mounted'\n  renderer: RendererInterface\n}\n\nexport interface RenderEventInterface {\n  type: 'beforerender' | 'afterrender'\n  renderer: RendererInterface\n  time: number\n}\n\nexport interface ResizeEventInterface {\n  type: 'resize'\n  renderer: RendererInterface\n  size: SizeInterface\n}\n\ntype InitCallbackType = CallbackType<EventInterface>\ntype MountedCallbackType = CallbackType<EventInterface>\ntype RenderCallbackType = CallbackType<RenderEventInterface>\ntype ResizeCallbackType = CallbackType<ResizeEventInterface>\n// type CallbackTypes = InitCallbackType | MountedCallbackType | RenderCallbackType | ResizeCallbackType\n\n// interface EventMap {\n//   'init': EventInterface;\n//   'mounted': EventInterface;\n//   'beforerender': RenderEventInterface;\n//   'afterrender': RenderEventInterface;\n//   'resize': ResizeEventInterface;\n// }\n\ninterface EventCallbackMap {\n  'init': InitCallbackType;\n  'mounted': MountedCallbackType;\n  'beforerender': RenderCallbackType;\n  'afterrender': RenderCallbackType;\n  'resize': ResizeCallbackType;\n}\n\ninterface RendererSetupInterface {\n  canvas: HTMLCanvasElement\n  three: ThreeInterface\n  renderer: WebGLRenderer\n  size: SizeInterface\n  renderFn(): void\n  raf: boolean\n\n  // pointerPosition?: Vector2\n  // pointerPositionN?: Vector2\n  // pointerPositionV3?: Vector3\n\n  initCallbacks: InitCallbackType[]\n  mountedCallbacks: MountedCallbackType[]\n  beforeRenderCallbacks: RenderCallbackType[]\n  afterRenderCallbacks: RenderCallbackType[]\n  resizeCallbacks: ResizeCallbackType[]\n}\n\nexport interface RendererInterface extends RendererSetupInterface {\n  scene?: Scene\n  camera?: Camera\n  composer?: EffectComposer\n\n  onInit(cb: InitCallbackType): void\n  onMounted(cb: MountedCallbackType): void\n\n  onBeforeRender(cb: RenderCallbackType): void\n  offBeforeRender(cb: RenderCallbackType): void\n  onAfterRender(cb: RenderCallbackType): void\n  offAfterRender(cb: RenderCallbackType): void\n\n  onResize(cb: ResizeCallbackType): void\n  offResize(cb: ResizeCallbackType): void\n\n  addListener<T extends keyof EventCallbackMap>(t: T, cb: EventCallbackMap[T]): void\n  removeListener<T extends keyof EventCallbackMap>(t: T, cb: EventCallbackMap[T]): void\n}\n\nexport const RendererInjectionKey: InjectionKey<RendererInterface> = Symbol('Renderer')\n\nexport default defineComponent({\n  name: 'Renderer',\n  props: {\n    antialias: Boolean,\n    alpha: Boolean,\n    autoClear: { type: Boolean, default: true },\n    orbitCtrl: { type: [Boolean, Object] as PropType<boolean | Record<string, unknown>>, default: false },\n    pointer: { type: [Boolean, Object] as PropType<boolean | PointerPublicConfigInterface>, default: false },\n    resize: { type: [Boolean, String] as PropType<boolean | string>, default: false },\n    shadow: Boolean,\n    width: String,\n    height: String,\n    xr: Boolean,\n    onReady: Function as PropType<(r: RendererInterface) => void>,\n    onClick: Function as PropType<(this: HTMLCanvasElement, ev: MouseEvent) => any>,\n  },\n  setup(props): RendererSetupInterface {\n    const initCallbacks: InitCallbackType[] = []\n    const mountedCallbacks: MountedCallbackType[] = []\n    const beforeRenderCallbacks: RenderCallbackType[] = []\n    const afterRenderCallbacks: RenderCallbackType[] = []\n    const resizeCallbacks: ResizeCallbackType[] = []\n\n    const canvas = document.createElement('canvas')\n    const config: ThreeConfigInterface = {\n      canvas,\n      antialias: props.antialias,\n      alpha: props.alpha,\n      autoClear: props.autoClear,\n      orbitCtrl: props.orbitCtrl,\n      pointer: props.pointer,\n      resize: props.resize,\n    }\n\n    if (props.width) config.width = parseInt(props.width)\n    if (props.height) config.height = parseInt(props.height)\n\n    const three = useThree(config)\n\n    const renderFn: {(): void} = () => {}\n\n    // we have to handle canvas events ourself (it is not rendered by vue)\n    if (props.onClick) {\n      canvas.addEventListener('click', props.onClick)\n    }\n\n    return {\n      canvas,\n      three,\n      renderer: three.renderer,\n      size: three.size,\n      renderFn,\n      raf: true,\n      initCallbacks,\n      mountedCallbacks,\n      beforeRenderCallbacks,\n      afterRenderCallbacks,\n      resizeCallbacks,\n    }\n  },\n  computed: {\n    camera: {\n      get: function(): Camera | undefined { return this.three.camera },\n      set: function(camera: Camera): void { this.three.camera = camera },\n    },\n    scene: {\n      get: function(): Scene | undefined { return this.three.scene },\n      set: function(scene: Scene): void { this.three.scene = scene },\n    },\n    composer: {\n      get: function(): EffectComposer | undefined { return this.three.composer },\n      set: function(composer: EffectComposer): void { this.three.composer = composer },\n    },\n  },\n  provide() {\n    return {\n      [RendererInjectionKey as symbol]: this,\n    }\n  },\n  mounted() {\n    // appendChild won't work on reload\n    this.$el.parentNode.insertBefore(this.canvas, this.$el)\n\n    if (this.three.init()) {\n      // if (this.three.pointer) {\n      //   this.pointerPosition = this.three.pointer.position\n      //   this.pointerPositionN = this.three.pointer.positionN\n      //   this.pointerPositionV3 = this.three.pointer.positionV3\n      // }\n\n      // TODO : don't use config\n      this.three.config.onResize = (size) => {\n        this.resizeCallbacks.forEach(e => e({ type: 'resize', renderer: this, size }))\n      }\n\n      // TODO : improve shadow params\n      this.renderer.shadowMap.enabled = this.shadow\n\n      this.renderFn = this.three.composer ? this.three.renderC : this.three.render\n\n      this.initCallbacks.forEach(e => e({ type: 'init', renderer: this }))\n      this.onReady?.(this as RendererInterface)\n\n      if (this.xr) {\n        this.renderer.xr.enabled = true\n        this.renderer.setAnimationLoop(this.render)\n      } else {\n        requestAnimationFrame(this.renderLoop)\n      }\n    }\n\n    this.mountedCallbacks.forEach(e => e({ type: 'mounted', renderer: this }))\n  },\n  beforeUnmount() {\n    this.canvas.remove()\n    this.beforeRenderCallbacks = []\n    this.afterRenderCallbacks = []\n    this.raf = false\n    this.three.dispose()\n  },\n  methods: {\n    onInit(cb: InitCallbackType) { this.addListener('init', cb) },\n    onMounted(cb: MountedCallbackType) { this.addListener('mounted', cb) },\n    onBeforeRender(cb: RenderCallbackType) { this.addListener('beforerender', cb) },\n    offBeforeRender(cb: RenderCallbackType) { this.removeListener('beforerender', cb) },\n    onAfterRender(cb: RenderCallbackType) { this.addListener('afterrender', cb) },\n    offAfterRender(cb: RenderCallbackType) { this.removeListener('afterrender', cb) },\n    onResize(cb: ResizeCallbackType) { this.addListener('resize', cb) },\n    offResize(cb: ResizeCallbackType) { this.removeListener('resize', cb) },\n\n    addListener(type: string, cb: {(e?: any): void}) {\n      const callbacks = this.getCallbacks(type)\n      callbacks.push(cb)\n    },\n\n    removeListener(type: string, cb: {(e?: any): void}) {\n      const callbacks = this.getCallbacks(type)\n      const index = callbacks.indexOf(cb)\n      if (index) callbacks.splice(index, 1)\n    },\n\n    getCallbacks(type: string) {\n      if (type === 'init') {\n        return this.initCallbacks\n      } else if (type === 'mounted') {\n        return this.mountedCallbacks\n      } else if (type === 'beforerender') {\n        return this.beforeRenderCallbacks\n      } else if (type === 'afterrender') {\n        return this.afterRenderCallbacks\n      } else {\n        return this.resizeCallbacks\n      }\n    },\n\n    render(time: number) {\n      this.beforeRenderCallbacks.forEach(e => e({ type: 'beforerender', renderer: this, time }))\n      // this.onFrame?.(cbParams)\n      this.renderFn()\n      this.afterRenderCallbacks.forEach(e => e({ type: 'afterrender', renderer: this, time }))\n    },\n    renderLoop(time: number) {\n      if (this.raf) requestAnimationFrame(this.renderLoop)\n      this.render(time)\n    },\n  },\n  render() {\n    return this.$slots.default ? this.$slots.default() : []\n  },\n  __hmrId: 'Renderer',\n})\n","import { Vector2, Vector3 } from 'three'\nimport { toRef, watch } from 'vue'\n\nexport function setFromProp(o: Record<string, unknown>, prop: Record<string, unknown>): void {\n  if (prop instanceof Object) {\n    Object.entries(prop).forEach(([key, value]) => {\n      o[key] = value\n    })\n  }\n}\n\nexport function bindProps(src: any, props: string[], dst: any): void {\n  props.forEach(prop => {\n    bindProp(src, prop, dst, prop)\n  })\n}\n\nexport function bindProp(src: any, srcProp: string, dst: any, dstProp?: string): void {\n  const _dstProp = dstProp || srcProp\n  const ref = toRef(src, srcProp)\n  if (ref.value instanceof Object) {\n    setFromProp(dst[_dstProp], ref.value)\n    watch(ref, (value) => { setFromProp(dst[_dstProp], value) }, { deep: true })\n  } else {\n    if (ref.value) dst[_dstProp] = src[srcProp]\n    watch(ref, (value) => { dst[_dstProp] = value })\n  }\n}\n\nexport function propsValues(props: Record<string, unknown>, exclude: string[] = []): Record<string, unknown> {\n  const values: Record<string, unknown> = {}\n  Object.entries(props).forEach(([key, value]) => {\n    if (!exclude || (exclude && !exclude.includes(key))) {\n      values[key] = value\n    }\n  })\n  return values\n}\n\nexport function lerp(value1: number, value2: number, amount: number): number {\n  amount = amount < 0 ? 0 : amount\n  amount = amount > 1 ? 1 : amount\n  return value1 + (value2 - value1) * amount\n}\n\nexport function limit(val: number, min: number, max: number): number {\n  return val < min ? min : (val > max ? max : val)\n}\n\n// from https://github.com/pmndrs/drei/blob/master/src/useMatcapTexture.tsx\nconst MATCAP_ROOT = 'https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d'\nconst DEFAULT_MATCAP = '0404E8_0404B5_0404CB_3333FC'\n\nexport function getMatcapUrl(hash = DEFAULT_MATCAP, format = 1024): string {\n  const fileName = `${hash}${getMatcapFormatString(format)}.png`\n  return `${MATCAP_ROOT}/${format}/${fileName}`\n}\n\nfunction getMatcapFormatString(format: number) {\n  switch (format) {\n    case 64:\n      return '-64px'\n    case 128:\n      return '-128px'\n    case 256:\n      return '-256px'\n    case 512:\n      return '-512px'\n    default:\n      return ''\n  }\n}\n","import { defineComponent } from 'vue'\n// import { Camera } from 'three'\n// import { RendererInjectionKey, RendererInterface } from './Renderer'\n// import Object3D from './Object3D'\n\n// export interface CameraSetupInterface {\n//   renderer?: RendererInterface\n//   camera: Camera\n// }\n\nexport default defineComponent({\n  // TODO: eventually extend Object3D\n  // extends: Object3D,\n\n  // inject: { renderer: RendererInjectionKey as symbol },\n\n  // setup(): CameraSetupInterface {\n  //   return {}\n  // },\n\n  render() {\n    return this.$slots.default ? this.$slots.default() : []\n  },\n})\n","import { defineComponent, inject, PropType, watch } from 'vue'\nimport { OrthographicCamera } from 'three'\nimport { bindProp } from '../tools'\nimport Camera from './Camera'\nimport { Vector3PropInterface } from './Object3D'\nimport { RendererInjectionKey } from './Renderer'\n\nexport default defineComponent({\n  extends: Camera,\n  name: 'OrthographicCamera',\n  props: {\n    left: { type: Number, default: -1 },\n    right: { type: Number, default: 1 },\n    top: { type: Number, default: 1 },\n    bottom: { type: Number, default: -1 },\n    near: { type: Number, default: 0.1 },\n    far: { type: Number, default: 2000 },\n    zoom: { type: Number, default: 1 },\n    position: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\n  },\n  setup(props) {\n    const renderer = inject(RendererInjectionKey)\n    if (!renderer) {\n      console.error('Renderer not found')\n      return\n    }\n\n    const camera = new OrthographicCamera(props.left, props.right, props.top, props.bottom, props.near, props.far)\n    renderer.camera = camera\n\n    bindProp(props, 'position', camera)\n\n    const watchProps = ['left', 'right', 'top', 'bottom', 'near', 'far', 'zoom']\n    watchProps.forEach(p => {\n      // @ts-ignore\n      watch(() => props[p], (value) => {\n        // @ts-ignore\n        camera[p] = value\n        camera.updateProjectionMatrix()\n      })\n    })\n\n    return { renderer, camera }\n  },\n  __hmrId: 'OrthographicCamera',\n})\n","import { defineComponent, inject, PropType, watch } from 'vue'\nimport { PerspectiveCamera } from 'three'\nimport { bindProp } from '../tools'\nimport Camera from './Camera'\nimport { Vector3PropInterface } from './Object3D'\nimport { RendererInjectionKey } from './Renderer'\n\nexport default defineComponent({\n  extends: Camera,\n  name: 'PerspectiveCamera',\n  props: {\n    aspect: { type: Number, default: 1 },\n    far: { type: Number, default: 2000 },\n    fov: { type: Number, default: 50 },\n    near: { type: Number, default: 0.1 },\n    position: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\n    lookAt: { type: Object as PropType<Vector3PropInterface>, default: null },\n  },\n  setup(props) {\n    const renderer = inject(RendererInjectionKey)\n    if (!renderer) {\n      console.error('Renderer not found')\n      return\n    }\n\n    const camera = new PerspectiveCamera(props.fov, props.aspect, props.near, props.far)\n    renderer.camera = camera\n\n    bindProp(props, 'position', camera)\n\n    if (props.lookAt) camera.lookAt(props.lookAt.x ?? 0, props.lookAt.y, props.lookAt.z)\n    watch(() => props.lookAt, (v) => { camera.lookAt(v.x ?? 0, v.y, v.z) }, { deep: true })\n\n    const watchProps = ['aspect', 'far', 'fov', 'near']\n    watchProps.forEach(p => {\n      // @ts-ignore\n      watch(() => props[p], (value) => {\n        // @ts-ignore\n        camera[p] = value\n        camera.updateProjectionMatrix()\n      })\n    })\n\n    return { renderer, camera }\n  },\n  __hmrId: 'PerspectiveCamera',\n})\n","import { defineComponent, inject, InjectionKey, provide, watch } from 'vue'\nimport { Scene, Color, Object3D, Texture } from 'three'\nimport { RendererInjectionKey } from './Renderer'\n\nexport const SceneInjectionKey: InjectionKey<Scene> = Symbol('Scene')\n\nexport default defineComponent({\n  name: 'Scene',\n  props: {\n    background: [String, Number, Object],\n  },\n  setup(props) {\n    const renderer = inject(RendererInjectionKey)\n    const scene = new Scene()\n\n    if (!renderer) {\n      console.error('Renderer not found')\n      return\n    }\n\n    renderer.scene = scene\n    provide(SceneInjectionKey, scene)\n\n    const setBackground = (value: any): void => {\n      if (!value) return\n      if (typeof value === 'string' || typeof value === 'number') {\n        if (scene.background instanceof Color) scene.background.set(value)\n        else scene.background = new Color(value)\n      } else if (value instanceof Texture) {\n        scene.background = value\n      }\n    }\n\n    setBackground(props.background)\n    watch(() => props.background, setBackground)\n\n    const add = (o: Object3D): void => { scene.add(o) }\n    const remove = (o: Object3D): void => { scene.remove(o) }\n\n    return { scene, add, remove }\n  },\n  render() {\n    return this.$slots.default ? this.$slots.default() : []\n  },\n  __hmrId: 'Scene',\n})\n","import { Object3D, Scene } from 'three'\nimport { ComponentPublicInstance, defineComponent, PropType, watch } from 'vue'\nimport { bindProp } from '../tools'\nimport { RendererInjectionKey, RendererInterface } from './Renderer'\nimport { SceneInjectionKey } from './Scene'\n\nexport interface Object3DSetupInterface {\n  renderer?: RendererInterface\n  scene?: Scene\n  o3d?: Object3D\n  parent?: ComponentPublicInstance\n}\n\nexport interface Object3DInterface extends Object3DSetupInterface {\n  addToParent(o?: Object3D): boolean\n  removeFromParent(o?: Object3D): boolean\n  add(o: Object3D): void\n  remove(o: Object3D): void\n}\n\n// export function object3DSetup(): Object3DSetupInterface {\n//   const renderer = inject(RendererInjectionKey)\n//   const scene = inject(SceneInjectionKey)\n//   return { scene, renderer }\n// }\n\nexport interface Vector2PropInterface {\n  x?: number\n  y?: number\n}\n\nexport interface Vector3PropInterface extends Vector2PropInterface {\n  z?: number\n}\n\nexport interface EulerPropInterface extends Vector3PropInterface {\n  order?: 'XYZ' | 'YZX' | 'ZXY' | 'XZY' | 'YXZ' | 'ZYX'\n}\n\nexport default defineComponent({\n  name: 'Object3D',\n  // inject for sub components\n  inject: {\n    renderer: RendererInjectionKey as symbol,\n    scene: SceneInjectionKey as symbol,\n  },\n  emits: ['created', 'ready'],\n  props: {\n    position: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\n    rotation: { type: Object as PropType<EulerPropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\n    scale: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 1, y: 1, z: 1, order: 'XYZ' }) },\n    lookAt: { type: Object as PropType<Vector3PropInterface>, default: null },\n    autoRemove: { type: Boolean, default: true },\n    userData: { type: Object, default: () => ({}) },\n  },\n  setup(): Object3DSetupInterface {\n    // return object3DSetup()\n    return {}\n  },\n  created() {\n    if (!this.renderer) {\n      console.error('Missing parent Renderer')\n    }\n    if (!this.scene) {\n      console.error('Missing parent Scene')\n    }\n  },\n  unmounted() {\n    if (this.autoRemove) this.removeFromParent()\n  },\n  methods: {\n    initObject3D(o3d: Object3D) {\n      this.o3d = o3d\n\n      this.$emit('created', o3d)\n\n      bindProp(this, 'position', o3d)\n      bindProp(this, 'rotation', o3d)\n      bindProp(this, 'scale', o3d)\n      bindProp(this, 'userData', o3d.userData)\n\n      if (this.lookAt) o3d.lookAt(this.lookAt.x ?? 0, this.lookAt.y, this.lookAt.z)\n      watch(() => this.lookAt, (v) => { o3d.lookAt(v.x ?? 0, v.y, v.z) }, { deep: true })\n\n      this.parent = this.getParent()\n      if (this.addToParent()) this.$emit('ready', this)\n      else console.error('Missing parent (Scene, Group...)')\n    },\n    getParent(): undefined | ComponentPublicInstance {\n      let parent = this.$parent\n      while (parent) {\n        if ((parent as any).add) return parent\n        parent = parent.$parent\n      }\n      return undefined\n    },\n    addToParent(o?: Object3D) {\n      const o3d = o || this.o3d\n      if (this.parent) {\n        (this.parent as any).add(o3d)\n        return true\n      }\n      return false\n    },\n    removeFromParent(o?: Object3D) {\n      const o3d = o || this.o3d\n      if (this.parent) {\n        (this.parent as any).remove(o3d)\n        return true\n      }\n      return false\n    },\n    add(o: Object3D) { this.o3d?.add(o) },\n    remove(o: Object3D) { this.o3d?.remove(o) },\n  },\n  render() {\n    return this.$slots.default ? this.$slots.default() : []\n  },\n  __hmrId: 'Object3D',\n})\n","import { defineComponent } from 'vue'\nimport { Group } from 'three'\nimport Object3D from './Object3D'\n\nexport default defineComponent({\n  name: 'Group',\n  extends: Object3D,\n  setup() {\n    return {\n      group: new Group(),\n    }\n  },\n  created() {\n    this.initObject3D(this.group)\n  },\n  __hmrId: 'Group',\n})\n","import { Object3D } from 'three'\nimport { defineComponent, inject, PropType } from 'vue'\nimport usePointer, { IntersectObject, PointerInterface, PointerIntersectCallbackType } from './usePointer'\nimport { RendererInjectionKey, RendererInterface } from './Renderer'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst emptyCallBack: PointerIntersectCallbackType = () => {}\n\ninterface RaycasterSetupInterface {\n  renderer?: RendererInterface\n  pointer?: PointerInterface\n}\n\nexport default defineComponent({\n  name: 'Raycaster',\n  props: {\n    onPointerEnter: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\n    onPointerOver: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\n    onPointerMove: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\n    onPointerLeave: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\n    onClick: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\n    intersectMode: { type: String, default: 'move' },\n  },\n  setup(): RaycasterSetupInterface {\n    const renderer = inject(RendererInjectionKey)\n    return { renderer }\n  },\n  mounted() {\n    if (!this.renderer) {\n      console.error('Renderer not found')\n      return\n    }\n    const renderer = this.renderer\n\n    this.renderer.onMounted(() => {\n      if (!renderer.camera) return\n\n      this.pointer = usePointer({\n        camera: renderer.camera,\n        domElement: renderer.canvas,\n        intersectObjects: this.getIntersectObjects(),\n        onIntersectEnter: this.onPointerEnter,\n        onIntersectOver: this.onPointerOver,\n        onIntersectMove: this.onPointerMove,\n        onIntersectLeave: this.onPointerLeave,\n        onIntersectClick: this.onClick,\n      })\n      this.pointer.addListeners()\n\n      if (this.intersectMode === 'frame') {\n        renderer.onBeforeRender(this.pointer.intersect)\n      }\n    })\n  },\n  unmounted() {\n    if (this.pointer) {\n      this.pointer.removeListeners()\n      this.renderer?.offBeforeRender(this.pointer.intersect)\n    }\n  },\n  methods: {\n    getIntersectObjects() {\n      if (this.renderer && this.renderer.scene) {\n        const children = this.renderer.scene.children.filter((c: Object3D) => ['Mesh', 'InstancedMesh'].includes(c.type))\n        return children as IntersectObject[]\n      }\n      return []\n    },\n  },\n  render() {\n    return []\n  },\n  __hmrId: 'Raycaster',\n})\n","import { defineComponent, inject, onUnmounted } from 'vue'\r\nimport {\r\n  CubeCamera,\r\n  LinearMipmapLinearFilter,\r\n  RGBFormat,\r\n  WebGLCubeRenderTarget,\r\n} from 'three'\r\nimport Object3D from './Object3D'\r\nimport { RendererInjectionKey } from './Renderer'\r\n\r\nexport default defineComponent({\r\n  extends: Object3D,\r\n  props: {\r\n    cubeRTSize: { type: Number, default: 256 },\r\n    cubeCameraNear: { type: Number, default: 0.1 },\r\n    cubeCameraFar: { type: Number, default: 2000 },\r\n    autoUpdate: Boolean,\r\n  },\r\n  setup(props) {\r\n    const rendererC = inject(RendererInjectionKey)\r\n    if (!rendererC || !rendererC.scene) {\r\n      console.error('Missing Renderer / Scene')\r\n      return\r\n    }\r\n\r\n    const renderer = rendererC.renderer, scene = rendererC.scene\r\n    const cubeRT = new WebGLCubeRenderTarget(props.cubeRTSize, { format: RGBFormat, generateMipmaps: true, minFilter: LinearMipmapLinearFilter })\r\n    const cubeCamera = new CubeCamera(props.cubeCameraNear, props.cubeCameraFar, cubeRT)\r\n    const updateRT = () => { cubeCamera.update(renderer, scene) }\r\n\r\n    if (props.autoUpdate) {\r\n      rendererC.onBeforeRender(updateRT)\r\n      onUnmounted(() => { rendererC.offBeforeRender(updateRT) })\r\n    } else {\r\n      rendererC.onMounted(updateRT)\r\n    }\r\n\r\n    return { cubeRT, cubeCamera }\r\n  },\r\n  render() {\r\n    return []\r\n  },\r\n  __hmrId: 'CubeCamera',\r\n})\r\n","import { ComponentPropsOptions, defineComponent, InjectionKey, watch } from 'vue'\nimport { BufferGeometry, Material, Mesh as TMesh } from 'three'\nimport Object3D, { Object3DSetupInterface } from '../core/Object3D'\nimport { bindProp } from '../tools'\n\nexport const pointerProps = {\n  onPointerEnter: Function,\n  onPointerOver: Function,\n  onPointerMove: Function,\n  onPointerLeave: Function,\n  onPointerDown: Function,\n  onPointerUp: Function,\n  onClick: Function,\n}\n\nexport interface MeshSetupInterface extends Object3DSetupInterface {\n  mesh?: TMesh\n  geometry?: BufferGeometry\n  material?: Material\n  loading?: boolean\n}\n\nexport interface MeshInterface extends MeshSetupInterface {\n  setGeometry(g: BufferGeometry): void\n  setMaterial(m: Material): void\n}\n\nexport const MeshInjectionKey: InjectionKey<MeshInterface> = Symbol('Mesh')\n\nconst Mesh = defineComponent({\n  name: 'Mesh',\n  extends: Object3D,\n  props: {\n    castShadow: Boolean,\n    receiveShadow: Boolean,\n    ...pointerProps,\n  },\n  setup(): MeshSetupInterface {\n    return {}\n  },\n  provide() {\n    return {\n      [MeshInjectionKey as symbol]: this,\n    }\n  },\n  mounted() {\n    // TODO : proper ?\n    if (!this.mesh && !this.loading) this.initMesh()\n  },\n  methods: {\n    initMesh() {\n      const mesh = new TMesh(this.geometry, this.material)\n      mesh.userData.component = this\n\n      bindProp(this, 'castShadow', mesh)\n      bindProp(this, 'receiveShadow', mesh)\n\n      if (this.onPointerEnter ||\n        this.onPointerOver ||\n        this.onPointerMove ||\n        this.onPointerLeave ||\n        this.onPointerDown ||\n        this.onPointerUp ||\n        this.onClick) {\n        if (this.renderer) this.renderer.three.addIntersectObject(mesh)\n      }\n\n      this.mesh = mesh\n      this.initObject3D(mesh)\n    },\n    createGeometry() {},\n    addGeometryWatchers(props: Readonly<ComponentPropsOptions>) {\n      Object.keys(props).forEach(prop => {\n        // @ts-ignore\n        watch(() => this[prop], () => {\n          this.refreshGeometry()\n        })\n      })\n    },\n    setGeometry(geometry: BufferGeometry) {\n      this.geometry = geometry\n      if (this.mesh) this.mesh.geometry = geometry\n    },\n    setMaterial(material: Material) {\n      this.material = material\n      if (this.mesh) this.mesh.material = material\n    },\n    refreshGeometry() {\n      const oldGeo = this.geometry\n      this.createGeometry()\n      if (this.mesh && this.geometry) this.mesh.geometry = this.geometry\n      oldGeo?.dispose()\n    },\n  },\n  unmounted() {\n    if (this.mesh) {\n      if (this.renderer) this.renderer.three.removeIntersectObject(this.mesh)\n    }\n    // for predefined mesh (geometry/material are not unmounted)\n    if (this.geometry) this.geometry.dispose()\n    if (this.material) this.material.dispose()\n  },\n  __hmrId: 'Mesh',\n})\n\nexport default Mesh\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function meshComponent<P extends Readonly<ComponentPropsOptions>>(\n  name: string,\n  props: P,\n  createGeometry: {(c: any): BufferGeometry}\n) {\n  return defineComponent({\n    name,\n    extends: Mesh,\n    props,\n    created() {\n      this.createGeometry()\n      this.addGeometryWatchers(props)\n    },\n    methods: {\n      createGeometry() {\n        this.geometry = createGeometry(this)\n      },\n    },\n  })\n}\n","import { ComponentPropsOptions, defineComponent, watch } from 'vue'\nimport { BufferGeometry } from 'three'\nimport { MeshInjectionKey, MeshInterface } from '../meshes/Mesh'\n\nexport interface GeometrySetupInterface {\n  mesh?: MeshInterface\n  geometry?: BufferGeometry\n  watchProps?: string[]\n}\n\n// function defaultSetup(): GeometryInterface {\n//   const mesh = inject('mesh') as MeshInterface\n//   const watchProps: string[] = []\n//   return { mesh, watchProps }\n// }\n\nconst Geometry = defineComponent({\n  props: {\n    rotateX: Number,\n    rotateY: Number,\n    rotateZ: Number,\n  },\n  // inject for sub components\n  inject: {\n    mesh: MeshInjectionKey as symbol,\n  },\n  setup(): GeometrySetupInterface {\n    return {}\n  },\n  created() {\n    if (!this.mesh) {\n      console.error('Missing parent Mesh')\n      return\n    }\n\n    this.createGeometry()\n    this.rotateGeometry()\n    if (this.geometry) this.mesh.setGeometry(this.geometry)\n\n    Object.keys(this.$props).forEach(prop => {\n      // @ts-ignore\n      watch(() => this[prop], this.refreshGeometry)\n    })\n  },\n  unmounted() {\n    this.geometry?.dispose()\n  },\n  methods: {\n    createGeometry() {},\n    rotateGeometry() {\n      if (!this.geometry) return\n      if (this.rotateX) this.geometry.rotateX(this.rotateX)\n      if (this.rotateY) this.geometry.rotateY(this.rotateY)\n      if (this.rotateZ) this.geometry.rotateZ(this.rotateZ)\n    },\n    refreshGeometry() {\n      const oldGeo = this.geometry\n      this.createGeometry()\n      this.rotateGeometry()\n      if (this.geometry && this.mesh) this.mesh.setGeometry(this.geometry)\n      oldGeo?.dispose()\n    },\n  },\n  render() { return [] },\n})\n\nexport default Geometry\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function geometryComponent<P extends Readonly<ComponentPropsOptions>>(\n  name: string,\n  props: P,\n  createGeometry: {(c: any): BufferGeometry}\n) {\n  return defineComponent({\n    name,\n    extends: Geometry,\n    props,\n    methods: {\n      createGeometry() {\n        this.geometry = createGeometry(this)\n      },\n    },\n  })\n}\n","import { geometryComponent } from './Geometry'\nimport { BoxGeometry } from 'three'\n\nexport const props = {\n  size: Number,\n  width: { type: Number, default: 1 },\n  height: { type: Number, default: 1 },\n  depth: { type: Number, default: 1 },\n  widthSegments: { type: Number, default: 1 },\n  heightSegments: { type: Number, default: 1 },\n  depthSegments: { type: Number, default: 1 },\n} as const\n\nexport function createGeometry(comp: any): BoxGeometry {\n  if (comp.size) {\n    return new BoxGeometry(comp.size, comp.size, comp.size, comp.widthSegments, comp.heightSegments, comp.depthSegments)\n  } else {\n    return new BoxGeometry(comp.width, comp.height, comp.depth, comp.widthSegments, comp.heightSegments, comp.depthSegments)\n  }\n}\n\nexport default geometryComponent('BoxGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { CircleGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  segments: { type: Number, default: 8 },\n  thetaStart: { type: Number, default: 0 },\n  thetaLength: { type: Number, default: Math.PI * 2 },\n} as const\n\nexport function createGeometry(comp: any): CircleGeometry {\n  return new CircleGeometry(comp.radius, comp.segments, comp.thetaStart, comp.thetaLength)\n}\n\nexport default geometryComponent('CircleGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { ConeGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  height: { type: Number, default: 1 },\n  radialSegments: { type: Number, default: 8 },\n  heightSegments: { type: Number, default: 1 },\n  openEnded: { type: Boolean, default: false },\n  thetaStart: { type: Number, default: 0 },\n  thetaLength: { type: Number, default: Math.PI * 2 },\n} as const\n\nexport function createGeometry(comp: any): ConeGeometry {\n  return new ConeGeometry(comp.radius, comp.height, comp.radialSegments, comp.heightSegments, comp.openEnded, comp.thetaStart, comp.thetaLength)\n}\n\nexport default geometryComponent('ConeGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { CylinderGeometry } from 'three'\n\nexport const props = {\n  radiusTop: { type: Number, default: 1 },\n  radiusBottom: { type: Number, default: 1 },\n  height: { type: Number, default: 1 },\n  radialSegments: { type: Number, default: 8 },\n  heightSegments: { type: Number, default: 1 },\n  openEnded: { type: Boolean, default: false },\n  thetaStart: { type: Number, default: 0 },\n  thetaLength: { type: Number, default: Math.PI * 2 },\n} as const\n\nexport function createGeometry(comp: any): CylinderGeometry {\n  return new CylinderGeometry(comp.radiusTop, comp.radiusBottom, comp.height, comp.radialSegments, comp.heightSegments, comp.openEnded, comp.thetaStart, comp.thetaLength)\n}\n\nexport default geometryComponent('CylinderGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { DodecahedronGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  detail: { type: Number, default: 0 },\n} as const\n\nexport function createGeometry(comp: any): DodecahedronGeometry {\n  return new DodecahedronGeometry(comp.radius, comp.detail)\n}\n\nexport default geometryComponent('DodecahedronGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { IcosahedronGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  detail: { type: Number, default: 0 },\n} as const\n\nexport function createGeometry(comp: any): IcosahedronGeometry {\n  return new IcosahedronGeometry(comp.radius, comp.detail)\n}\n\nexport default geometryComponent('IcosahedronGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { LatheGeometry } from 'three'\n\nexport const props = {\n  points: Array,\n  segments: { type: Number, default: 12 },\n  phiStart: { type: Number, default: 0 },\n  phiLength: { type: Number, default: Math.PI * 2 },\n} as const\n\nexport function createGeometry(comp: any): LatheGeometry {\n  return new LatheGeometry(comp.points, comp.segments, comp.phiStart, comp.phiLength)\n}\n\nexport default geometryComponent('LatheGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { OctahedronGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  detail: { type: Number, default: 0 },\n} as const\n\nexport function createGeometry(comp: any): OctahedronGeometry {\n  return new OctahedronGeometry(comp.radius, comp.detail)\n}\n\nexport default geometryComponent('OctahedronGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { PlaneGeometry } from 'three'\n\nexport const props = {\n  width: { type: Number, default: 1 },\n  height: { type: Number, default: 1 },\n  widthSegments: { type: Number, default: 1 },\n  heightSegments: { type: Number, default: 1 },\n} as const\n\nexport function createGeometry(comp: any): PlaneGeometry {\n  return new PlaneGeometry(comp.width, comp.height, comp.widthSegments, comp.heightSegments)\n}\n\nexport default geometryComponent('PlaneGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { PolyhedronGeometry } from 'three'\n\nexport const props = {\n  vertices: Array,\n  indices: Array,\n  radius: { type: Number, default: 1 },\n  detail: { type: Number, default: 0 },\n} as const\n\nexport function createGeometry(comp: any): PolyhedronGeometry {\n  return new PolyhedronGeometry(comp.vertices, comp.indices, comp.radius, comp.detail)\n}\n\nexport default geometryComponent('PolyhedronGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { RingGeometry } from 'three'\n\nexport const props = {\n  innerRadius: { type: Number, default: 0.5 },\n  outerRadius: { type: Number, default: 1 },\n  thetaSegments: { type: Number, default: 8 },\n  phiSegments: { type: Number, default: 1 },\n  thetaStart: { type: Number, default: 0 },\n  thetaLength: { type: Number, default: Math.PI * 2 },\n} as const\n\nexport function createGeometry(comp: any): RingGeometry {\n  return new RingGeometry(comp.innerRadius, comp.outerRadius, comp.thetaSegments, comp.phiSegments, comp.thetaStart, comp.thetaLength)\n}\n\nexport default geometryComponent('RingGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { SphereGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  widthSegments: { type: Number, default: 12 },\n  heightSegments: { type: Number, default: 12 },\n} as const\n\nexport function createGeometry(comp: any): SphereGeometry {\n  return new SphereGeometry(comp.radius, comp.widthSegments, comp.heightSegments)\n}\n\nexport default geometryComponent('SphereGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { TetrahedronGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  detail: { type: Number, default: 0 },\n} as const\n\nexport function createGeometry(comp: any): TetrahedronGeometry {\n  return new TetrahedronGeometry(comp.radius, comp.detail)\n}\n\nexport default geometryComponent('TetrahedronGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { TorusGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  tube: { type: Number, default: 0.4 },\n  radialSegments: { type: Number, default: 8 },\n  tubularSegments: { type: Number, default: 6 },\n  arc: { type: Number, default: Math.PI * 2 },\n} as const\n\nexport function createGeometry(comp: any): TorusGeometry {\n  return new TorusGeometry(comp.radius, comp.tube, comp.radialSegments, comp.tubularSegments, comp.arc)\n}\n\nexport default geometryComponent('TorusGeometry', props, createGeometry)\n","import { geometryComponent } from './Geometry'\nimport { TorusKnotGeometry } from 'three'\n\nexport const props = {\n  radius: { type: Number, default: 1 },\n  tube: { type: Number, default: 0.4 },\n  tubularSegments: { type: Number, default: 64 },\n  radialSegments: { type: Number, default: 8 },\n  p: { type: Number, default: 2 },\n  q: { type: Number, default: 3 },\n} as const\n\nexport function createGeometry(comp: any): TorusKnotGeometry {\n  return new TorusKnotGeometry(comp.radius, comp.tube, comp.tubularSegments, comp.radialSegments, comp.p, comp.q)\n}\n\nexport default geometryComponent('TorusKnotGeometry', props, createGeometry)\n","import { defineComponent } from 'vue'\nimport { CatmullRomCurve3, Curve, TubeGeometry, Vector3 } from 'three'\nimport Geometry from './Geometry'\n\nexport const props = {\n  points: Array,\n  path: Curve,\n  tubularSegments: { type: Number, default: 64 },\n  radius: { type: Number, default: 1 },\n  radialSegments: { type: Number, default: 8 },\n  closed: { type: Boolean, default: false },\n} as const\n\nexport function createGeometry(comp: any): TubeGeometry {\n  let curve\n  if (comp.points) {\n    curve = new CatmullRomCurve3(comp.points)\n  } else if (comp.path) {\n    curve = comp.path\n  } else {\n    console.error('Missing path curve or points.')\n  }\n  return new TubeGeometry(curve, comp.tubularSegments, comp.radius, comp.radiusSegments, comp.closed)\n}\n\nexport default defineComponent({\n  extends: Geometry,\n  props,\n  methods: {\n    createGeometry() {\n      this.geometry = createGeometry(this)\n    },\n    // update points (without using prop, faster)\n    updatePoints(points: Vector3[]) {\n      updateTubeGeometryPoints(this.geometry as TubeGeometry, points)\n    },\n  },\n})\n\nexport function updateTubeGeometryPoints(tube: TubeGeometry, points: Vector3[]): void {\n  const curve = new CatmullRomCurve3(points)\n  const { radialSegments, radius, tubularSegments, closed } = tube.parameters\n  const frames = curve.computeFrenetFrames(tubularSegments, closed)\n  tube.tangents = frames.tangents\n  tube.normals = frames.normals\n  tube.binormals = frames.binormals\n  tube.parameters.path = curve\n\n  const pAttribute = tube.getAttribute('position')\n  const nAttribute = tube.getAttribute('normal')\n\n  const normal = new Vector3()\n  const P = new Vector3()\n\n  for (let i = 0; i < tubularSegments; i++) {\n    updateSegment(i)\n  }\n  updateSegment(tubularSegments)\n\n  tube.attributes.position.needsUpdate = true\n  tube.attributes.normal.needsUpdate = true\n\n  function updateSegment(i: number) {\n    curve.getPointAt(i / tubularSegments, P)\n    const N = frames.normals[i]\n    const B = frames.binormals[i]\n    for (let j = 0; j <= radialSegments; j++) {\n      const v = j / radialSegments * Math.PI * 2\n      const sin = Math.sin(v)\n      const cos = -Math.cos(v)\n      normal.x = (cos * N.x + sin * B.x)\n      normal.y = (cos * N.y + sin * B.y)\n      normal.z = (cos * N.z + sin * B.z)\n      normal.normalize()\n      const index = (i * (radialSegments + 1) + j)\n      nAttribute.setXYZ(index, normal.x, normal.y, normal.z)\n      pAttribute.setXYZ(index, P.x + radius * normal.x, P.y + radius * normal.y, P.z + radius * normal.z)\n    }\n  }\n}\n","import { DirectionalLight, Light, SpotLight } from 'three'\nimport { defineComponent, PropType, watch } from 'vue'\nimport Object3D, { Vector2PropInterface } from '../core/Object3D'\nimport { bindProp, setFromProp } from '../tools'\n\nexport interface LightSetupInterface {\n  light?: Light\n}\n\nexport default defineComponent({\n  extends: Object3D,\n  name: 'Light',\n  props: {\n    color: { type: String, default: '#ffffff' },\n    intensity: { type: Number, default: 1 },\n    castShadow: { type: Boolean, default: false },\n    shadowMapSize: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 512, y: 512 }) },\n    shadowCamera: { type: Object, default: () => ({}) },\n  },\n  setup(): LightSetupInterface {\n    return {}\n  },\n  unmounted() {\n    if (this.light instanceof SpotLight || this.light instanceof DirectionalLight) {\n      this.removeFromParent(this.light.target)\n    }\n  },\n  methods: {\n    initLight(light: Light) {\n      this.light = light\n\n      if ((light as any).shadow) {\n        light.castShadow = this.castShadow\n        // @ts-ignore\n        setFromProp(light.shadow.mapSize, this.shadowMapSize)\n        // @ts-ignore\n        setFromProp(light.shadow.camera, this.shadowCamera)\n      }\n\n      ['color', 'intensity', 'castShadow'].forEach(p => {\n        // @ts-ignore\n        watch(() => this[p], (value) => {\n          if (p === 'color') {\n            light.color.set(value)\n          } else {\n            // @ts-ignore\n            light[p] = value\n          }\n        })\n      })\n\n      this.initObject3D(light)\n\n      if (light instanceof SpotLight || light instanceof DirectionalLight) {\n        bindProp(this, 'target', light.target, 'position')\n        this.addToParent(light.target)\n      }\n    },\n  },\n  __hmrId: 'Light',\n})\n","import { defineComponent } from 'vue'\nimport { AmbientLight } from 'three'\nimport Light from './Light'\n\nexport default defineComponent({\n  extends: Light,\n  created() {\n    this.initLight(new AmbientLight(this.color, this.intensity))\n  },\n  __hmrId: 'AmbientLight',\n})\n","import { defineComponent, PropType } from 'vue'\nimport { DirectionalLight } from 'three'\nimport { Vector2PropInterface } from '../core/Object3D'\nimport Light from './Light'\n\nexport default defineComponent({\n  extends: Light,\n  props: {\n    target: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\n  },\n  created() {\n    this.initLight(new DirectionalLight(this.color, this.intensity))\n  },\n  __hmrId: 'DirectionalLight',\n})\n","import { defineComponent, watch } from 'vue'\nimport { HemisphereLight } from 'three'\nimport Light from './Light'\n\nexport default defineComponent({\n  extends: Light,\n  props: {\n    groundColor: { type: String, default: '#444444' },\n  },\n  created() {\n    const light = new HemisphereLight(this.color, this.groundColor, this.intensity)\n    watch(() => this.groundColor, (value) => { light.groundColor.set(value) })\n    this.initLight(light)\n  },\n  __hmrId: 'HemisphereLight',\n})\n","import { defineComponent } from 'vue'\nimport { PointLight } from 'three'\nimport Light from './Light'\n\nexport default defineComponent({\n  extends: Light,\n  props: {\n    distance: { type: Number, default: 0 },\n    decay: { type: Number, default: 1 },\n  },\n  created() {\n    this.initLight(new PointLight(this.color, this.intensity, this.distance, this.decay))\n  },\n  __hmrId: 'PointLight',\n})\n","import { defineComponent, watch } from 'vue'\nimport { RectAreaLight } from 'three'\nimport { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js'\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js'\nimport Light from './Light'\n\nexport default defineComponent({\n  extends: Light,\n  props: {\n    width: { type: Number, default: 10 },\n    height: { type: Number, default: 10 },\n    helper: Boolean,\n  },\n  created() {\n    RectAreaLightUniformsLib.init()\n    const light = new RectAreaLight(this.color, this.intensity, this.width, this.height)\n\n    const watchProps = ['width', 'height']\n    watchProps.forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], (value) => { light[p] = value })\n    })\n\n    if (this.helper) {\n      const lightHelper = new RectAreaLightHelper(light)\n      light.add(lightHelper)\n    }\n\n    this.initLight(light)\n  },\n  __hmrId: 'RectAreaLight',\n})\n","import { defineComponent, watch } from 'vue'\nimport { SpotLight } from 'three'\nimport Light from './Light'\n\nexport default defineComponent({\n  extends: Light,\n  props: {\n    angle: { type: Number, default: Math.PI / 3 },\n    decay: { type: Number, default: 1 },\n    distance: { type: Number, default: 0 },\n    penumbra: { type: Number, default: 0 },\n    target: Object,\n  },\n  created() {\n    const light = new SpotLight(this.color, this.intensity, this.distance, this.angle, this.penumbra, this.decay)\n\n    const watchProps = ['angle', 'decay', 'distance', 'penumbra']\n    watchProps.forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], (value) => { light[p] = value })\n    })\n\n    this.initLight(light)\n  },\n  __hmrId: 'SpotLight',\n})\n","import { defineComponent, InjectionKey, watch } from 'vue'\nimport { FrontSide, Material, Texture } from 'three'\nimport { MeshInjectionKey, MeshInterface } from '../meshes/Mesh'\n\nexport interface MaterialSetupInterface {\n  mesh?: MeshInterface\n  material?: Material\n  createMaterial?(): Material\n}\n\nexport interface MaterialInterface extends MaterialSetupInterface {\n  setProp(key: string, value: unknown, needsUpdate: boolean): void\n  setTexture(texture: Texture | null, key: string): void\n}\n\nexport const MaterialInjectionKey: InjectionKey<MaterialInterface> = Symbol('Material')\n\nexport default defineComponent({\n  // inject for sub components\n  inject: {\n    mesh: MeshInjectionKey as symbol,\n  },\n  props: {\n    color: { type: [String, Number], default: '#ffffff' },\n    depthTest: { type: Boolean, default: true },\n    depthWrite: { type: Boolean, default: true },\n    fog: { type: Boolean, default: true },\n    opacity: { type: Number, default: 1 },\n    side: { type: Number, default: FrontSide },\n    transparent: Boolean,\n    vertexColors: Boolean,\n  },\n  setup(): MaterialSetupInterface {\n    return {}\n  },\n  provide() {\n    return {\n      [MaterialInjectionKey as symbol]: this,\n    }\n  },\n  created() {\n    if (!this.mesh) {\n      console.error('Missing parent Mesh')\n      return\n    }\n\n    if (this.createMaterial) {\n      this.material = this.createMaterial()\n      this.mesh.setMaterial(this.material)\n      this.addWatchers()\n    }\n  },\n  unmounted() {\n    this.material?.dispose()\n  },\n  methods: {\n    setProp(key: string, value: any, needsUpdate = false) {\n      if (this.material) {\n        // @ts-ignore\n        this.material[key] = value\n        this.material.needsUpdate = needsUpdate\n      }\n    },\n    setTexture(texture: Texture | null, key = 'map') {\n      this.setProp(key, texture, true)\n    },\n    addWatchers() {\n      ['color', 'depthTest', 'depthWrite', 'fog', 'opacity', 'side', 'transparent'].forEach(p => {\n        // @ts-ignore\n        watch(() => this[p], (value) => {\n          if (p === 'color') {\n            // @ts-ignore\n            this.material.color.set(value)\n          } else {\n            // @ts-ignore\n            this.material[p] = value\n          }\n        })\n      })\n    },\n  },\n  render() {\n    return this.$slots.default ? this.$slots.default() : []\n  },\n  __hmrId: 'Material',\n})\n\nexport const wireframeProps = {\n  wireframe: { type: Boolean, default: false },\n  // not needed for WebGL\n  // wireframeLinecap: { type: String, default: 'round' },\n  // wireframeLinejoin: { type: String, default: 'round' },\n  wireframeLinewidth: { type: Number, default: 1 }, // not really useful\n}\n","import { defineComponent } from 'vue'\nimport { MeshBasicMaterial } from 'three'\nimport { bindProps, propsValues } from '../tools'\nimport Material, { wireframeProps } from './Material'\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    ...wireframeProps,\n  },\n  methods: {\n    createMaterial() {\n      const material = new MeshBasicMaterial(propsValues(this.$props))\n      bindProps(this, Object.keys(wireframeProps), material)\n      return material\n    },\n  },\n  __hmrId: 'BasicMaterial',\n})\n","import { defineComponent } from 'vue'\nimport { MeshLambertMaterial } from 'three'\nimport { bindProps, propsValues } from '../tools'\nimport Material, { wireframeProps } from './Material'\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    ...wireframeProps,\n  },\n  methods: {\n    createMaterial() {\n      const material = new MeshLambertMaterial(propsValues(this.$props))\n      bindProps(this, Object.keys(wireframeProps), material)\n      return material\n    },\n  },\n  __hmrId: 'LambertMaterial',\n})\n","import { defineComponent } from 'vue'\nimport { MeshMatcapMaterial, TextureLoader } from 'three'\nimport { propsValues, getMatcapUrl } from '../tools'\nimport Material from './Material'\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    src: String,\n    name: { type: String, default: '0404E8_0404B5_0404CB_3333FC' },\n    flatShading: Boolean,\n  },\n  methods: {\n    createMaterial() {\n      const src = this.src ? this.src : getMatcapUrl(this.name)\n      const opts = propsValues(this.$props, ['src', 'name'])\n      opts.matcap = new TextureLoader().load(src)\n      return new MeshMatcapMaterial(opts)\n    },\n  },\n  __hmrId: 'MatcapMaterial',\n})\n","import { defineComponent, watch } from 'vue'\nimport { MeshPhongMaterial } from 'three'\nimport { bindProps, propsValues } from '../tools'\nimport Material, { wireframeProps } from './Material'\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    emissive: { type: [Number, String], default: 0 },\n    emissiveIntensity: { type: Number, default: 1 },\n    reflectivity: { type: Number, default: 1 },\n    shininess: { type: Number, default: 30 },\n    specular: { type: [String, Number], default: 0x111111 },\n    flatShading: Boolean,\n    ...wireframeProps,\n  },\n  methods: {\n    createMaterial() {\n      const material = new MeshPhongMaterial(propsValues(this.$props))\n\n      // TODO : handle flatShading ?\n      const watchProps = ['emissive', 'emissiveIntensity', 'reflectivity', 'shininess', 'specular']\n      watchProps.forEach(p => {\n        // @ts-ignore\n        watch(() => this[p], (value) => {\n          if (p === 'emissive' || p === 'specular') {\n            material[p].set(value)\n          } else {\n            // @ts-ignore\n            material[p] = value\n          }\n        })\n      })\n      bindProps(this, Object.keys(wireframeProps), material)\n\n      return material\n    },\n  },\n  __hmrId: 'PhongMaterial',\n})\n","import { defineComponent, PropType, watch } from 'vue'\nimport { MeshStandardMaterial } from 'three'\nimport { bindProp, bindProps, propsValues } from '../tools'\nimport Material, { wireframeProps } from './Material'\nimport { Vector2PropInterface } from '../core/Object3D'\n\nconst props = {\n  aoMapIntensity: { type: Number, default: 1 },\n  bumpScale: { type: Number, default: 1 },\n  displacementBias: { type: Number, default: 0 },\n  displacementScale: { type: Number, default: 1 },\n  emissive: { type: [String, Number] as PropType<string | number>, default: 0 },\n  emissiveIntensity: { type: Number, default: 1 },\n  envMapIntensity: { type: Number, default: 1 },\n  lightMapIntensity: { type: Number, default: 1 },\n  metalness: { type: Number, default: 0 },\n  normalScale: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 1, y: 1 }) },\n  roughness: { type: Number, default: 1 },\n  refractionRatio: { type: Number, default: 0.98 },\n  flatShading: Boolean,\n} as const\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    ...props,\n    ...wireframeProps,\n  },\n  methods: {\n    createMaterial() {\n      const material = new MeshStandardMaterial(propsValues(this.$props, ['normalScale']))\n\n      // TODO : use setProp, handle flatShading ?\n      Object.keys(props).forEach(p => {\n        if (p === 'normalScale') return\n        // @ts-ignore\n        watch(() => this[p], (value) => {\n          if (p === 'emissive') {\n            material[p].set(value)\n          } else {\n            // @ts-ignore\n            material[p] = value\n          }\n        })\n      })\n\n      bindProp(this, 'normalScale', material)\n      bindProps(this, Object.keys(wireframeProps), material)\n\n      return material\n    },\n  },\n  __hmrId: 'StandardMaterial',\n})\n","import { defineComponent } from 'vue'\nimport { MeshPhysicalMaterial } from 'three'\nimport { propsValues } from '../tools'\nimport StandardMaterial from './StandardMaterial'\n\nexport default defineComponent({\n  extends: StandardMaterial,\n  props: {\n    flatShading: Boolean,\n  },\n  methods: {\n    createMaterial() {\n      return new MeshPhysicalMaterial(propsValues(this.$props))\n    },\n  },\n  __hmrId: 'PhysicalMaterial',\n})\n","import { defineComponent, watch } from 'vue'\nimport { ShaderMaterial } from 'three'\nimport Material from './Material'\n\nconst defaultVertexShader = `\n  varying vec2 vUv;\n  void main(){\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n  }\n`\n\nconst defaultFragmentShader = `\n  varying vec2 vUv;\n  void main() {\n    gl_FragColor = vec4(vUv.x, vUv.y, 0., 1.0);\n  }\n`\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    uniforms: { type: Object, default: () => ({}) },\n    vertexShader: { type: String, default: defaultVertexShader },\n    fragmentShader: { type: String, default: defaultFragmentShader },\n  },\n  methods: {\n    createMaterial() {\n      const material = new ShaderMaterial({\n        uniforms: this.uniforms,\n        vertexShader: this.vertexShader,\n        fragmentShader: this.fragmentShader,\n      })\n\n      const watchProps = ['vertexShader', 'fragmentShader']\n      watchProps.forEach(p => {\n        // @ts-ignore\n        watch(() => this[p], (value) => {\n          this.setProp(p, value, true)\n        })\n      })\n\n      return material\n    },\n    addWatchers() {},\n  },\n  __hmrId: 'ShaderMaterial',\n})\n","/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on three/examples/jsm/shaders/SubsurfaceScatteringShader.js\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\nimport {\n  Color,\n  ShaderChunk,\n  ShaderLib,\n  UniformsUtils,\n} from 'three'\n\nfunction replaceAll(string: string, find: string, replace: string) {\n  return string.split(find).join(replace)\n}\n\nconst meshphongFragHead = ShaderChunk.meshphong_frag.slice(0, ShaderChunk.meshphong_frag.indexOf('void main() {'))\nconst meshphongFragBody = ShaderChunk.meshphong_frag.slice(ShaderChunk.meshphong_frag.indexOf('void main() {'))\n\nconst SubsurfaceScatteringShader = {\n\n  uniforms: UniformsUtils.merge([\n    ShaderLib.phong.uniforms,\n    {\n      thicknessColor: { value: new Color(0xffffff) },\n      thicknessDistortion: { value: 0.1 },\n      thicknessAmbient: { value: 0.0 },\n      thicknessAttenuation: { value: 0.1 },\n      thicknessPower: { value: 2.0 },\n      thicknessScale: { value: 10.0 },\n    },\n  ]),\n\n  vertexShader: `\n    #define USE_UV\n    ${ShaderChunk.meshphong_vert}\n  `,\n\n  fragmentShader: `\n    #define USE_UV\n    #define SUBSURFACE\n\n    ${meshphongFragHead}\n\n    uniform float thicknessPower;\n    uniform float thicknessScale;\n    uniform float thicknessDistortion;\n    uniform float thicknessAmbient;\n    uniform float thicknessAttenuation;\n    uniform vec3 thicknessColor;\n\n    void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\n      #ifdef USE_COLOR\n        vec3 thickness = vColor * thicknessColor;\n      #else\n        vec3 thickness = thicknessColor;\n      #endif\n      vec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\n      float scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n      vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\n      reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n    }\n  ` + meshphongFragBody.replace(\n    '#include <lights_fragment_begin>',\n    replaceAll(\n      ShaderChunk.lights_fragment_begin,\n      'RE_Direct( directLight, geometry, material, reflectedLight );',\n      `\n        RE_Direct( directLight, geometry, material, reflectedLight );\n        #if defined( SUBSURFACE ) && defined( USE_UV )\n          RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\n        #endif\n      `\n    )\n  ),\n}\n\nexport default SubsurfaceScatteringShader\n","import { defineComponent, PropType } from 'vue'\nimport { Color, ShaderMaterial, UniformsUtils } from 'three'\nimport SubsurfaceScatteringShader from './SubsurfaceScatteringShader'\nimport Material from './Material'\n// import { bindProps, propsValues } from '../tools'\n\nconst props = {\n  color: { type: [String, Number] as PropType<string | number>, default: '#ffffff' },\n  thicknessColor: { type: [String, Number] as PropType<string | number>, default: '#ffffff' },\n  thicknessDistortion: { type: Number, default: 0.4 },\n  thicknessAmbient: { type: Number, default: 0.01 },\n  thicknessAttenuation: { type: Number, default: 0.7 },\n  thicknessPower: { type: Number, default: 2 },\n  thicknessScale: { type: Number, default: 4 },\n} as const\n\nexport default defineComponent({\n  extends: Material,\n  props,\n  methods: {\n    createMaterial() {\n      const params = SubsurfaceScatteringShader\n      const uniforms = UniformsUtils.clone(params.uniforms)\n\n      Object.keys(props).forEach((key) => {\n        // @ts-ignore\n        const value = this[key]\n        let _key = key, _value = value\n        if (['color', 'thicknessColor'].includes(key)) {\n          if (key === 'color') _key = 'diffuse'\n          _value = new Color(value)\n        }\n        uniforms[_key].value = _value\n      })\n\n      const material = new ShaderMaterial({\n        ...params,\n        uniforms,\n        lights: true,\n        transparent: this.transparent,\n        vertexColors: this.vertexColors,\n      })\n\n      return material\n    },\n  },\n  __hmrId: 'SubSurfaceMaterial',\n})\n","import { defineComponent } from 'vue'\nimport { MeshToonMaterial } from 'three'\nimport { bindProps, propsValues } from '../tools'\nimport Material, { wireframeProps } from './Material'\n\nexport default defineComponent({\n  extends: Material,\n  props: {\n    ...wireframeProps,\n  },\n  methods: {\n    createMaterial() {\n      const material = new MeshToonMaterial(propsValues(this.$props))\n      bindProps(this, Object.keys(wireframeProps), material)\n      return material\n    },\n  },\n  __hmrId: 'ToonMaterial',\n})\n","import { defineComponent, PropType, watch } from 'vue'\nimport { ClampToEdgeWrapping, LinearFilter, LinearMipmapLinearFilter, ShaderMaterial, Texture, TextureLoader, UVMapping } from 'three'\nimport { bindProp } from '../tools'\nimport { MaterialInjectionKey, MaterialInterface } from './Material'\nimport { Vector2PropInterface } from '../core/Object3D'\n\nexport interface TexureInterface {\n  material?: MaterialInterface\n  texture?: Texture\n}\n\nexport default defineComponent({\n  inject: {\n    material: MaterialInjectionKey as symbol,\n  },\n  props: {\n    name: { type: String, default: 'map' },\n    uniform: String,\n    src: String,\n    onLoad: Function as PropType<(t: Texture) => void>,\n    onProgress: Function as PropType<(e: ProgressEvent) => void>,\n    onError: Function as PropType<(e: ErrorEvent) => void>,\n    // format: { type: Number, default: RGBAFormat },\n    mapping: { type: Number, default: UVMapping },\n    wrapS: { type: Number, default: ClampToEdgeWrapping },\n    wrapT: { type: Number, default: ClampToEdgeWrapping },\n    magFilter: { type: Number, default: LinearFilter },\n    minFilter: { type: Number, default: LinearMipmapLinearFilter },\n    repeat: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 1, y: 1 }) },\n    rotation: { type: Number, default: 0 },\n    center: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 0, y: 0 }) },\n  },\n  setup(): TexureInterface {\n    return {}\n  },\n  created() {\n    this.refreshTexture()\n    watch(() => this.src, this.refreshTexture)\n  },\n  unmounted() {\n    this.material?.setTexture(null, this.name)\n    this.texture?.dispose()\n  },\n  methods: {\n    createTexture() {\n      if (!this.src) return undefined\n      const texture = new TextureLoader().load(this.src, this.onLoaded, this.onProgress, this.onError)\n      // use format ? TextureLoader will automatically set format to THREE.RGBFormat for JPG images.\n      const wathProps = ['mapping', 'wrapS', 'wrapT', 'magFilter', 'minFilter', 'repeat', 'rotation', 'center']\n      wathProps.forEach(prop => { bindProp(this, prop, texture) })\n      return texture\n    },\n    refreshTexture() {\n      this.texture = this.createTexture()\n\n      if (this.texture && this.material) {\n        this.material.setTexture(this.texture, this.name)\n        if (this.material.material instanceof ShaderMaterial && this.uniform) {\n          (this.material as any).uniforms[this.uniform] = { value: this.texture }\n        }\n      }\n    },\n    onLoaded(t: Texture) {\n      this.onLoad?.(t)\n    },\n  },\n  render() { return [] },\n})\n","import { defineComponent, PropType, watch } from 'vue'\nimport { CubeReflectionMapping, CubeTextureLoader, RGBFormat } from 'three'\nimport Texture from './Texture'\n\nexport default defineComponent({\n  extends: Texture,\n  props: {\n    path: { type: String, required: true },\n    urls: {\n      type: Array as PropType<string[]>,\n      default: () => ['px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'],\n    },\n    // format: { type: Number, default: RGBFormat },\n    mapping: { type: Number, default: CubeReflectionMapping },\n  },\n  created() {\n    watch(() => this.path, this.refreshTexture)\n    watch(() => this.urls, this.refreshTexture)\n  },\n  methods: {\n    createTexture() {\n      return new CubeTextureLoader()\n        .setPath(this.path)\n        .load(this.urls, this.onLoaded, this.onProgress, this.onError)\n    },\n  },\n})\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/BoxGeometry'\n\nexport default meshComponent('Box', props, createGeometry)\n\n// import { defineComponent } from 'vue'\n// import Mesh, { meshComponent } from './Mesh'\n//\n// export default defineComponent({\n//   extends: Mesh,\n//   props,\n//   created() {\n//     this.createGeometry()\n//     this.addGeometryWatchers(props)\n//   },\n//   methods: {\n//     createGeometry() {\n//       this.geometry = createGeometry(this)\n//     },\n//   },\n// })\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/CircleGeometry'\n\nexport default meshComponent('Circle', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/ConeGeometry'\n\nexport default meshComponent('Cone', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/CylinderGeometry'\n\nexport default meshComponent('Cylinder', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/DodecahedronGeometry'\n\nexport default meshComponent('Dodecahedron', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/IcosahedronGeometry'\n\nexport default meshComponent('Icosahedron', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/LatheGeometry'\n\nexport default meshComponent('Lathe', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/OctahedronGeometry'\n\nexport default meshComponent('Octahedron', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/PlaneGeometry'\n\nexport default meshComponent('Plane', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/PolyhedronGeometry'\n\nexport default meshComponent('Polyhedron', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/RingGeometry'\n\nexport default meshComponent('Ring', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/SphereGeometry'\n\nexport default meshComponent('Sphere', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/TetrahedronGeometry'\n\nexport default meshComponent('Tetrahedron', props, createGeometry)\n","import { defineComponent, PropType, watch } from 'vue'\nimport { Font, FontLoader, TextGeometry } from 'three'\nimport Mesh, { MeshSetupInterface } from './Mesh'\n\ninterface TextSetupInterface extends MeshSetupInterface {\n  geometry?: TextGeometry\n  font?: Font\n}\n\nconst props = {\n  text: { type: String, required: true, default: 'Text' },\n  fontSrc: { type: String, required: true },\n  size: { type: Number, default: 80 },\n  height: { type: Number, default: 5 },\n  depth: { type: Number, default: 1 },\n  curveSegments: { type: Number, default: 12 },\n  bevelEnabled: { type: Boolean, default: false },\n  bevelThickness: { type: Number, default: 10 },\n  bevelSize: { type: Number, default: 8 },\n  bevelOffset: { type: Number, default: 0 },\n  bevelSegments: { type: Number, default: 5 },\n  align: { type: [Boolean, String] as PropType<boolean | string>, default: false },\n} as const\n\nexport default defineComponent({\n  extends: Mesh,\n  props,\n  setup(): TextSetupInterface {\n    return {}\n  },\n  created() {\n    if (!this.fontSrc) {\n      console.error('Missing required prop: \"font-src\"')\n      return\n    }\n    // if (!this.text) {\n    //   console.error('Missing required prop: \"text\"')\n    //   return\n    // }\n\n    // add watchers\n    const watchProps = [\n      'text', 'size', 'height', 'curveSegments',\n      'bevelEnabled', 'bevelThickness', 'bevelSize', 'bevelOffset', 'bevelSegments',\n      'align',\n    ]\n    watchProps.forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], () => {\n        if (this.font) this.refreshGeometry()\n      })\n    })\n\n    const loader = new FontLoader()\n    this.loading = true\n    loader.load(this.fontSrc, (font) => {\n      this.loading = false\n      this.font = font\n      this.createGeometry()\n      this.initMesh()\n    })\n  },\n  methods: {\n    createGeometry() {\n      this.geometry = new TextGeometry(this.text, {\n        // @ts-ignore\n        font: this.font,\n        size: this.size,\n        height: this.height,\n        depth: this.depth,\n        curveSegments: this.curveSegments,\n        bevelEnabled: this.bevelEnabled,\n        bevelThickness: this.bevelThickness,\n        bevelSize: this.bevelSize,\n        bevelOffset: this.bevelOffset,\n        bevelSegments: this.bevelSegments,\n      })\n\n      if (this.align === 'center') {\n        this.geometry.center()\n      }\n    },\n  },\n})\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/TorusGeometry'\n\nexport default meshComponent('Torus', props, createGeometry)\n","import { meshComponent } from './Mesh'\nimport { props, createGeometry } from '../geometries/TorusKnotGeometry'\n\nexport default meshComponent('TorusKnot', props, createGeometry)\n","import { defineComponent } from 'vue'\nimport { TubeGeometry, Vector3 } from 'three'\nimport Mesh from './Mesh'\nimport { props, createGeometry, updateTubeGeometryPoints } from '../geometries/TubeGeometry'\n\nexport default defineComponent({\n  extends: Mesh,\n  props,\n  created() {\n    this.createGeometry()\n    this.addGeometryWatchers(props)\n  },\n  methods: {\n    createGeometry() {\n      this.geometry = createGeometry(this)\n    },\n    // update curve points (without using prop, faster)\n    updatePoints(points: Vector3[]) {\n      updateTubeGeometryPoints(this.geometry as TubeGeometry, points)\n    },\n  },\n  __hmrId: 'Tube',\n})\n","import { defineComponent, watch } from 'vue'\nimport { DoubleSide, MeshBasicMaterial, PlaneGeometry, Texture, TextureLoader } from 'three'\nimport Mesh, { MeshSetupInterface } from './Mesh'\n\ninterface ImageSetupInterface extends MeshSetupInterface {\n  material?: MeshBasicMaterial\n  texture?: Texture\n}\n\nexport default defineComponent({\n  emits: ['loaded'],\n  extends: Mesh,\n  props: {\n    src: { type: String, required: true },\n    width: Number,\n    height: Number,\n    widthSegments: { type: Number, default: 1 },\n    heightSegments: { type: Number, default: 1 },\n    keepSize: Boolean,\n  },\n  setup(): ImageSetupInterface {\n    return {}\n  },\n  created() {\n    if (!this.renderer) return\n\n    this.geometry = new PlaneGeometry(1, 1, this.widthSegments, this.heightSegments)\n    this.material = new MeshBasicMaterial({ side: DoubleSide, map: this.loadTexture() })\n\n    watch(() => this.src, this.refreshTexture);\n\n    ['width', 'height'].forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], this.resize)\n    })\n\n    this.resize()\n    if (this.keepSize) this.renderer.onResize(this.resize)\n  },\n  unmounted() {\n    this.renderer?.offResize(this.resize)\n  },\n  methods: {\n    loadTexture() {\n      return new TextureLoader().load(this.src, this.onLoaded)\n    },\n    refreshTexture() {\n      this.texture?.dispose()\n      if (this.material) {\n        this.material.map = this.loadTexture()\n        this.material.needsUpdate = true\n      }\n    },\n    onLoaded(texture: Texture) {\n      this.texture = texture\n      this.resize()\n      this.$emit('loaded', texture)\n    },\n    resize() {\n      if (!this.renderer || !this.texture) return\n      const screen = this.renderer.size\n      const iW = this.texture.image.width\n      const iH = this.texture.image.height\n      const iRatio = iW / iH\n      let w = 1, h = 1\n      if (this.width && this.height) {\n        w = this.width * screen.wWidth / screen.width\n        h = this.height * screen.wHeight / screen.height\n      } else if (this.width) {\n        w = this.width * screen.wWidth / screen.width\n        h = w / iRatio\n      } else if (this.height) {\n        h = this.height * screen.wHeight / screen.height\n        w = h * iRatio\n      } else {\n        if (iRatio > 1) w = h * iRatio\n        else h = w / iRatio\n      }\n      if (this.mesh) {\n        this.mesh.scale.x = w\n        this.mesh.scale.y = h\n      }\n    },\n  },\n  __hmrId: 'Image',\n})\n","import { defineComponent } from 'vue'\nimport { InstancedMesh } from 'three'\nimport Mesh from './Mesh'\nimport { bindProp } from '../tools'\n\nexport default defineComponent({\n  extends: Mesh,\n  props: {\n    count: { type: Number, required: true },\n  },\n  methods: {\n    initMesh() {\n      if (!this.renderer) return\n\n      if (!this.geometry || !this.material) {\n        console.error('Missing geometry and/or material')\n        return false\n      }\n\n      this.mesh = new InstancedMesh(this.geometry, this.material, this.count)\n      this.mesh.userData.component = this\n\n      bindProp(this, 'castShadow', this.mesh)\n      bindProp(this, 'receiveShadow', this.mesh)\n\n      if (this.onPointerEnter ||\n        this.onPointerOver ||\n        this.onPointerMove ||\n        this.onPointerLeave ||\n        this.onPointerDown ||\n        this.onPointerUp ||\n        this.onClick) {\n        this.renderer.three.addIntersectObject(this.mesh)\n      }\n\n      this.initObject3D(this.mesh)\n    },\n  },\n  __hmrId: 'InstancedMesh',\n})\n","import { defineComponent } from 'vue'\nimport { Sprite, SpriteMaterial, Texture, TextureLoader } from 'three'\nimport Object3D, { Object3DSetupInterface } from '../core/Object3D'\n\ninterface SpriteSetupInterface extends Object3DSetupInterface {\n  texture?: Texture\n  material?: SpriteMaterial\n  sprite?: Sprite\n}\n\nexport default defineComponent({\n  extends: Object3D,\n  emits: ['loaded'],\n  props: {\n    src: { type: String, required: true },\n  },\n  setup(): SpriteSetupInterface {\n    return {}\n  },\n  created() {\n    this.texture = new TextureLoader().load(this.src, this.onLoaded)\n    this.material = new SpriteMaterial({ map: this.texture })\n    this.sprite = new Sprite(this.material)\n    this.initObject3D(this.sprite)\n  },\n  unmounted() {\n    this.texture?.dispose()\n    this.material?.dispose()\n  },\n  methods: {\n    onLoaded() {\n      this.updateUV()\n      this.$emit('loaded')\n    },\n    updateUV() {\n      if (!this.texture || !this.sprite) return\n\n      const iWidth = this.texture.image.width\n      const iHeight = this.texture.image.height\n      const iRatio = iWidth / iHeight\n\n      let x = 0.5, y = 0.5\n      if (iRatio > 1) {\n        x = 0.5 * iRatio\n      } else {\n        y = 0.5 / iRatio\n      }\n\n      const positions = this.sprite.geometry.attributes.position.array as Array<number>\n      positions[0] = -x; positions[1] = -y\n      positions[5] = x; positions[6] = -y\n      positions[10] = x; positions[11] = y\n      positions[15] = -x; positions[16] = y\n      this.sprite.geometry.attributes.position.needsUpdate = true\n    },\n  },\n  __hmrId: 'Sprite',\n})\n","import { Object3D as TObject3D } from 'three'\nimport { defineComponent } from 'vue'\nimport Object3D from '../core/Object3D'\n\nexport default defineComponent({\n  extends: Object3D,\n  emits: ['load', 'progress', 'error'],\n  props: {\n    src: { type: String, required: true },\n  },\n  data() {\n    return {\n      progress: 0,\n    }\n  },\n  methods: {\n    onLoad(model: TObject3D) {\n      this.$emit('load', model)\n      this.initObject3D(model)\n    },\n    onProgress(progress: ProgressEvent) {\n      this.progress = progress.loaded / progress.total\n      this.$emit('progress', progress)\n    },\n    onError(error: ErrorEvent) {\n      this.$emit('error', error)\n    },\n  },\n})\n","import { defineComponent } from 'vue'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport Model from './Model'\n\nexport default defineComponent({\n  extends: Model,\n  created() {\n    const loader = new GLTFLoader()\n    loader.load(this.src, (gltf) => {\n      this.onLoad(gltf.scene)\n    }, this.onProgress, this.onError)\n  },\n})\n","import { defineComponent } from 'vue'\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js'\nimport Model from './Model'\n\nexport default defineComponent({\n  extends: Model,\n  created() {\n    const loader = new FBXLoader()\n    loader.load(this.src, (fbx) => {\n      this.onLoad(fbx)\n    }, this.onProgress, this.onError)\n  },\n})\n","import { defineComponent, inject, InjectionKey } from 'vue'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass'\nimport { RendererInjectionKey, RendererInterface } from '../core/Renderer'\n\ninterface EffectComposerSetupInterface {\n  renderer?: RendererInterface\n  composer?: EffectComposer\n}\n\nexport interface EffectComposerInterface extends EffectComposerSetupInterface {\n  addPass(pass: Pass): void\n  removePass(pass: Pass): void\n}\n\nexport const ComposerInjectionKey: InjectionKey<EffectComposerInterface> = Symbol('Composer')\n\nexport default defineComponent({\n  setup(): EffectComposerSetupInterface {\n    const renderer = inject(RendererInjectionKey)\n    return { renderer }\n  },\n  provide() {\n    return {\n      [ComposerInjectionKey as symbol]: this,\n    }\n  },\n  created() {\n    if (!this.renderer) {\n      console.error('Renderer not found')\n      return\n    }\n    const renderer = this.renderer\n\n    const composer = new EffectComposer(this.renderer.renderer)\n    this.composer = composer\n    this.renderer.composer = composer\n\n    // this.renderer.onInit(() => {\n    renderer.addListener('init', () => {\n      renderer.renderer.autoClear = false\n      this.resize()\n      renderer.addListener('resize', this.resize)\n    })\n  },\n  unmounted() {\n    this.renderer?.removeListener('resize', this.resize)\n  },\n  methods: {\n    addPass(pass: Pass) {\n      this.composer?.addPass(pass)\n    },\n    removePass(pass: Pass) {\n      this.composer?.removePass(pass)\n    },\n    resize() {\n      if (this.composer && this.renderer) {\n        this.composer.setSize(this.renderer.size.width, this.renderer.size.height)\n      }\n    },\n  },\n  render() {\n    return this.$slots.default ? this.$slots.default() : []\n  },\n  __hmrId: 'EffectComposer',\n})\n","import { Pass } from 'three/examples/jsm/postprocessing/Pass'\nimport { defineComponent } from 'vue'\nimport { RendererInjectionKey, RendererInterface } from '../core/Renderer'\nimport { ComposerInjectionKey, EffectComposerInterface } from './EffectComposer'\n\nexport interface EffectSetupInterface {\n  renderer?: RendererInterface\n  composer?: EffectComposerInterface\n  pass?: Pass\n}\n\nexport default defineComponent({\n  // inject for sub components\n  inject: {\n    renderer: RendererInjectionKey as symbol,\n    composer: ComposerInjectionKey as symbol,\n  },\n  emits: ['ready'],\n  setup(): EffectSetupInterface {\n    return {}\n  },\n  created() {\n    if (!this.composer) {\n      console.error('Missing parent EffectComposer')\n    }\n    if (!this.renderer) {\n      console.error('Missing parent Renderer')\n    }\n  },\n  unmounted() {\n    if (this.pass) {\n      this.composer?.removePass(this.pass);\n      (this.pass as any).dispose?.()\n    }\n  },\n  methods: {\n    initEffectPass(pass: Pass) {\n      this.pass = pass\n      this.composer?.addPass(pass)\n      this.$emit('ready', pass)\n    },\n  },\n  render() {\n    return []\n  },\n  __hmrId: 'EffectPass',\n})\n","import { defineComponent } from 'vue'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport EffectPass from './EffectPass'\n\nexport default defineComponent({\n  extends: EffectPass,\n  created() {\n    if (!this.renderer) return\n\n    if (!this.renderer.scene) {\n      console.error('Missing Scene')\n      return\n    }\n    if (!this.renderer.camera) {\n      console.error('Missing Camera')\n      return\n    }\n    const pass = new RenderPass(this.renderer.scene, this.renderer.camera)\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'RenderPass',\n})\n","import { defineComponent, watch } from 'vue'\nimport { BokehPass } from 'three/examples/jsm/postprocessing/BokehPass.js'\nimport EffectPass from './EffectPass'\n\nconst props = {\n  focus: { type: Number, default: 1 },\n  aperture: { type: Number, default: 0.025 },\n  maxblur: { type: Number, default: 0.01 },\n} as const\n\nexport default defineComponent({\n  extends: EffectPass,\n  props,\n  created() {\n    if (!this.renderer) return\n\n    if (!this.renderer.scene) {\n      console.error('Missing Scene')\n      return\n    }\n    if (!this.renderer.camera) {\n      console.error('Missing Camera')\n      return\n    }\n\n    const params = {\n      focus: this.focus,\n      aperture: this.aperture,\n      maxblur: this.maxblur,\n      width: this.renderer.size.width,\n      height: this.renderer.size.height,\n    }\n\n    const pass = new BokehPass(this.renderer.scene, this.renderer.camera, params)\n\n    Object.keys(props).forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\n    })\n\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'BokehPass',\n})\n","import { defineComponent, watch } from 'vue'\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass.js'\nimport EffectPass from './EffectPass'\n\nconst props = {\n  noiseIntensity: { type: Number, default: 0.5 },\n  scanlinesIntensity: { type: Number, default: 0.05 },\n  scanlinesCount: { type: Number, default: 4096 },\n  grayscale: { type: Number, default: 0 },\n} as const\n\nexport default defineComponent({\n  extends: EffectPass,\n  props,\n  created() {\n    const pass = new FilmPass(this.noiseIntensity, this.scanlinesIntensity, this.scanlinesCount, this.grayscale)\n\n    Object.keys(props).forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\n    })\n\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'FilmPass',\n})\n","import { defineComponent } from 'vue'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js'\nimport EffectPass from './EffectPass'\nimport { SizeInterface } from '../core/useThree'\n\nexport default defineComponent({\n  extends: EffectPass,\n  created() {\n    const pass = new ShaderPass(FXAAShader)\n\n    // resize will be first called in renderer init\n    this.renderer?.addListener('resize', this.resize)\n\n    this.initEffectPass(pass)\n  },\n  unmounted() {\n    this.renderer?.removeListener('resize', this.resize)\n  },\n  methods: {\n    resize({ size }: { size: SizeInterface }) {\n      if (this.pass) {\n        const { resolution } = (this.pass as ShaderPass).material.uniforms\n        resolution.value.x = 1 / size.width\n        resolution.value.y = 1 / size.height\n      }\n    },\n  },\n  __hmrId: 'FXAAPass',\n})\n","import { defineComponent, watch } from 'vue'\nimport { HalftonePass } from 'three/examples/jsm/postprocessing/HalftonePass.js'\nimport EffectPass from './EffectPass'\n\nconst props = {\n  shape: { type: Number, default: 1 },\n  radius: { type: Number, default: 4 },\n  rotateR: { type: Number, default: Math.PI / 12 * 1 },\n  rotateG: { type: Number, default: Math.PI / 12 * 2 },\n  rotateB: { type: Number, default: Math.PI / 12 * 3 },\n  scatter: { type: Number, default: 0 },\n} as const\n\nexport default defineComponent({\n  extends: EffectPass,\n  props,\n  created() {\n    if (!this.renderer) return\n\n    const pass = new HalftonePass(this.renderer.size.width, this.renderer.size.height, {})\n\n    Object.keys(props).forEach(p => {\n      // @ts-ignore\n      pass.uniforms[p].value = this[p]\n      // @ts-ignore\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\n    })\n\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'HalftonePass',\n})\n","import { defineComponent } from 'vue'\nimport { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass.js'\nimport EffectPass from './EffectPass'\n\nexport default defineComponent({\n  extends: EffectPass,\n  created() {\n    if (!this.renderer) return\n\n    const pass = new SMAAPass(this.renderer.size.width, this.renderer.size.height)\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'SMAAPass',\n})\n","import { defineComponent } from 'vue'\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass.js'\nimport EffectPass from './EffectPass'\n\nexport default defineComponent({\n  extends: EffectPass,\n  props: {\n    options: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  created() {\n    if (!this.renderer) return\n\n    if (!this.renderer.scene) {\n      console.error('Missing Scene')\n      return\n    }\n    if (!this.renderer.camera) {\n      console.error('Missing Camera')\n      return\n    }\n\n    const pass = new SSAOPass(\n      this.renderer.scene,\n      this.renderer.camera,\n      this.renderer.size.width,\n      this.renderer.size.height\n    )\n\n    Object.keys(this.options).forEach(key => {\n      // @ts-ignore\n      pass[key] = this.options[key]\n    })\n\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'SSAOPass',\n})\n","export default {\n  uniforms: {},\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n  `,\n}\n","// From https://github.com/evanw/glfx.js\nimport { Vector2 } from 'three'\nimport DefaultShader from './default'\n\nexport default {\n  uniforms: {\n    tDiffuse: { value: null },\n    blurRadius: { value: 0 },\n    gradientRadius: { value: 0 },\n    start: { value: new Vector2() },\n    end: { value: new Vector2() },\n    delta: { value: new Vector2() },\n    texSize: { value: new Vector2() },\n  },\n  vertexShader: DefaultShader.vertexShader,\n  fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform float blurRadius;\n    uniform float gradientRadius;\n    uniform vec2 start;\n    uniform vec2 end;\n    uniform vec2 delta;\n    uniform vec2 texSize;\n    varying vec2 vUv;\n\n    float random(vec3 scale, float seed) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n\n      /* randomize the lookup values to hide the fixed number of samples */\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n      vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n      float radius = smoothstep(0.0, 1.0, abs(dot(vUv * texSize - start, normal)) / gradientRadius) * blurRadius;\n      for (float t = -30.0; t <= 30.0; t++) {\n          float percent = (t + offset - 0.5) / 30.0;\n          float weight = 1.0 - abs(percent);\n          vec4 texel = texture2D(tDiffuse, vUv + delta / texSize * percent * radius);\n          // vec4 texel2 = texture2D(tDiffuse, vUv + vec2(-delta.y, delta.x) / texSize * percent * radius);\n\n          /* switch to pre-multiplied alpha to correctly blur transparent images */\n          texel.rgb *= texel.a;\n          // texel2.rgb *= texel2.a;\n\n          color += texel * weight;\n          total += 2.0 * weight;\n      }\n\n      gl_FragColor = color / total;\n\n      /* switch back from pre-multiplied alpha */\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n    }\n  `,\n}\n","import { defineComponent, PropType, watch } from 'vue'\nimport { Vector2 } from 'three'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\nimport EffectPass from './EffectPass'\nimport TiltShift from '../shaders/TiltShift'\nimport { Vector2PropInterface } from '../core/Object3D'\nimport { bindProp } from '../tools'\n\nconst props = {\n  blurRadius: { type: Number, default: 10 },\n  gradientRadius: { type: Number, default: 100 },\n  start: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 0, y: 100 }) },\n  end: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 10, y: 100 }) },\n} as const\n\ninterface TiltShiftPassSetupInterface {\n  uniforms1: {[name: string]: { value: any }}\n  uniforms2: {[name: string]: { value: any }}\n  pass1?: ShaderPass\n  pass2?: ShaderPass\n}\n\nexport default defineComponent({\n  extends: EffectPass,\n  props,\n  setup(): TiltShiftPassSetupInterface {\n    return { uniforms1: {}, uniforms2: {} }\n  },\n  created() {\n    if (!this.composer) return\n\n    this.pass1 = new ShaderPass(TiltShift)\n    this.pass2 = new ShaderPass(TiltShift)\n\n    const uniforms1 = this.uniforms1 = this.pass1.uniforms\n    const uniforms2 = this.uniforms2 = this.pass2.uniforms\n\n    // shared uniforms\n    uniforms2.blurRadius = uniforms1.blurRadius\n    uniforms2.gradientRadius = uniforms1.gradientRadius\n    uniforms2.start = uniforms1.start\n    uniforms2.end = uniforms1.end\n    uniforms2.texSize = uniforms1.texSize\n\n    bindProp(this, 'blurRadius', uniforms1.blurRadius, 'value')\n    bindProp(this, 'gradientRadius', uniforms1.gradientRadius, 'value')\n\n    this.updateFocusLine();\n\n    ['start', 'end'].forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], this.updateFocusLine, { deep: true })\n    })\n\n    this.pass1.setSize = (width: number, height: number) => {\n      uniforms1.texSize.value.set(width, height)\n    }\n\n    this.initEffectPass(this.pass1)\n    this.composer.addPass(this.pass2)\n  },\n  unmounted() {\n    if (this.composer && this.pass2) this.composer.removePass(this.pass2)\n  },\n  methods: {\n    updateFocusLine() {\n      this.uniforms1.start.value.copy(this.start)\n      this.uniforms1.end.value.copy(this.end)\n      const dv = new Vector2().copy(this.end as Vector2).sub(this.start as Vector2).normalize()\n      this.uniforms1.delta.value.copy(dv)\n      this.uniforms2.delta.value.set(-dv.y, dv.x)\n    },\n  },\n  __hmrId: 'TiltShiftPass',\n})\n","import { defineComponent, watch } from 'vue'\nimport { Vector2 } from 'three'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\nimport EffectPass from './EffectPass'\n\nconst props = {\n  strength: { type: Number, default: 1.5 },\n  radius: { type: Number, default: 0 },\n  threshold: { type: Number, default: 0 },\n} as const\n\nexport default defineComponent({\n  extends: EffectPass,\n  props,\n  created() {\n    if (!this.renderer) return\n\n    const size = new Vector2(this.renderer.size.width, this.renderer.size.height)\n    const pass = new UnrealBloomPass(size, this.strength, this.radius, this.threshold)\n\n    Object.keys(props).forEach(p => {\n      // @ts-ignore\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\n    })\n\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'UnrealBloomPass',\n})\n","// From https://github.com/evanw/glfx.js\nimport { Vector2 } from 'three'\nimport DefaultShader from './default'\n\nexport default {\n  uniforms: {\n    tDiffuse: { value: null },\n    center: { value: new Vector2(0.5, 0.5) },\n    strength: { value: 0 },\n  },\n  vertexShader: DefaultShader.vertexShader,\n  fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec2 center;\n    uniform float strength;\n    varying vec2 vUv;\n\n    float random(vec3 scale, float seed) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n    \n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      vec2 toCenter = center - vUv;\n      \n      /* randomize the lookup values to hide the fixed number of samples */\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n      \n      for (float t = 0.0; t <= 40.0; t++) {\n        float percent = (t + offset) / 40.0;\n        float weight = 4.0 * (percent - percent * percent);\n        vec4 texel = texture2D(tDiffuse, vUv + toCenter * percent * strength);\n\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\n        texel.rgb *= texel.a;\n\n        color += texel * weight;\n        total += weight;\n      }\n\n      gl_FragColor = color / total;\n\n      /* switch back from pre-multiplied alpha */\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n    }\n  `,\n}\n","import { defineComponent, PropType } from 'vue'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\nimport EffectPass from './EffectPass'\nimport ZoomBlur from '../shaders/ZoomBlur'\nimport { Vector2PropInterface } from '../core/Object3D'\nimport { bindProp } from '../tools'\n\nexport default defineComponent({\n  extends: EffectPass,\n  props: {\n    center: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 0.5, y: 0.5 }) },\n    strength: { type: Number, default: 0.5 },\n  },\n  created() {\n    const pass = new ShaderPass(ZoomBlur)\n\n    bindProp(this, 'center', pass.uniforms.center, 'value')\n    bindProp(this, 'strength', pass.uniforms.strength, 'value')\n\n    this.initEffectPass(pass)\n  },\n  __hmrId: 'ZoomBlurPass',\n})\n","import { App, createApp as _createApp } from 'vue'\nimport * as TROIS from './index'\n\nexport const TroisJSVuePlugin = {\n  install(app: App): void {\n    const comps = [\n      'Camera',\n      'OrthographicCamera',\n      'PerspectiveCamera',\n      'Raycaster',\n      'Renderer',\n      'Scene',\n      'Group',\n\n      'AmbientLight',\n      'DirectionalLight',\n      'HemisphereLight',\n      'PointLight',\n      'RectAreaLight',\n      'SpotLight',\n\n      'BasicMaterial',\n      'LambertMaterial',\n      'MatcapMaterial',\n      'PhongMaterial',\n      'PhysicalMaterial',\n      'ShaderMaterial',\n      'StandardMaterial',\n      'SubSurfaceMaterial',\n      'ToonMaterial',\n\n      'Texture',\n      'CubeTexture',\n\n      'Mesh',\n\n      'Box', 'BoxGeometry',\n      'Circle', 'CircleGeometry',\n      'Cone', 'ConeGeometry',\n      'Cylinder', 'CylinderGeometry',\n      'Dodecahedron', 'DodecahedronGeometry',\n      'Icosahedron', 'IcosahedronGeometry',\n      'Lathe', 'LatheGeometry',\n      'Octahedron', 'OctahedronGeometry',\n      'Plane', 'PlaneGeometry',\n      'Polyhedron', 'PolyhedronGeometry',\n      'Ring', 'RingGeometry',\n      'Sphere', 'SphereGeometry',\n      'Tetrahedron', 'TetrahedronGeometry',\n      'Text',\n      'Torus', 'TorusGeometry',\n      'TorusKnot', 'TorusKnotGeometry',\n      'Tube', 'TubeGeometry',\n\n      'Image',\n      'InstancedMesh',\n      'Sprite',\n\n      'FBXModel',\n      'GLTFModel',\n\n      'BokehPass',\n      'EffectComposer',\n      'FilmPass',\n      'FXAAPass',\n      'HalftonePass',\n      'RenderPass',\n      'SAOPass',\n      'SMAAPass',\n      'SSAOPass',\n      'TiltShiftPass',\n      'UnrealBloomPass',\n      'ZoomBlurPass',\n\n      'GLTFViewer',\n    ]\n\n    comps.forEach(comp => {\n      // @ts-ignore\n      app.component(comp, TROIS[comp])\n    })\n  },\n}\n\nexport function createApp(params: any): App {\n  return _createApp(params).use(TroisJSVuePlugin)\n}\n","import { Texture, TextureLoader } from 'three'\n\nexport interface TextureConfigInterface {\n  src: string\n}\n\nexport interface TexturesInterface {\n  loader: TextureLoader\n  count: number\n  textures: Texture[],\n  loadProgress: number\n  loadTextures(images: TextureConfigInterface[], cb: {() : void}): void\n  dispose(): void\n}\n\nexport default function useTextures(): TexturesInterface {\n  const obj: TexturesInterface = {\n    loader: new TextureLoader(),\n    count: 0,\n    textures: [],\n    loadProgress: 0,\n    loadTextures,\n    dispose,\n  }\n  return obj\n\n  function loadTextures(images: TextureConfigInterface[], cb: {() : void}) {\n    obj.count = images.length\n    obj.textures.splice(0)\n    obj.loadProgress = 0\n    Promise.all(images.map(loadTexture)).then(cb)\n  }\n\n  function loadTexture(img: TextureConfigInterface, index: number) {\n    return new Promise(resolve => {\n      obj.loader.load(\n        img.src,\n        texture => {\n          obj.loadProgress += 1 / obj.count\n          obj.textures[index] = texture\n          resolve(texture)\n        }\n      )\n    })\n  }\n\n  function dispose() {\n    obj.textures.forEach(t => t.dispose())\n  }\n}\n"],"names":["Raycaster","Plane","InstancedMesh","OrthographicCamera","PerspectiveCamera","Scene","Texture","Group","CubeCamera","TMesh","props","BoxGeometry","createGeometry","CircleGeometry","ConeGeometry","CylinderGeometry","DodecahedronGeometry","IcosahedronGeometry","LatheGeometry","OctahedronGeometry","PlaneGeometry","PolyhedronGeometry","RingGeometry","SphereGeometry","TetrahedronGeometry","TorusGeometry","TorusKnotGeometry","TubeGeometry","SpotLight","DirectionalLight","AmbientLight","HemisphereLight","PointLight","RectAreaLight","ShaderMaterial","Sprite","EffectComposer","RenderPass","BokehPass","FilmPass","HalftonePass","SMAAPass","SSAOPass","UnrealBloomPass","_createApp"],"mappings":";;;;;;;;;;;;;;;;;;sBAcqC,SAAuD;AAC1F,QAAM;AAAA,IACJ;AAAA,IACA,gBAAgB,IAAI,QAAQ,GAAG,GAAG;AAAA,MAChC;AAEJ,QAAM,YAAY,IAAIA;AACtB,QAAM,WAAW,cAAc;AAC/B,QAAM,QAAQ,IAAIC,QAAM,IAAI,QAAQ,GAAG,GAAG,IAAI;AAE9C,QAAM,iBAAiB,CAAC,WAAoB;AAC1C,cAAU,cAAc,QAAQ;AAChC,WAAO,kBAAkB,MAAM;AAC/B,cAAU,IAAI,eAAe,OAAO;AAAA;AAGtC,QAAM,YAAY,CAAC,QAAiB,YAA+B;AACjE,cAAU,cAAc,QAAQ;AAChC,WAAO,UAAU,iBAAiB;AAAA;AAGpC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA;AAAA;;oBCkB+B,SAAmD;AACpF,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,gBAAgB,IAAI,QAAQ,GAAG;AAAA,IAC/B,kBAAkB,IAAI,QAAQ,GAAG,GAAG;AAAA,IACpC,UAAU,MAAM;AAAA;AAAA,IAChB,SAAS,MAAM;AAAA;AAAA,IACf,UAAU,MAAM;AAAA;AAAA,IAChB,UAAU,MAAM;AAAA;AAAA,IAChB,mBAAmB,MAAM;AAAA;AAAA,IACzB,kBAAkB,MAAM;AAAA;AAAA,IACxB,kBAAkB,MAAM;AAAA;AAAA,IACxB,mBAAmB,MAAM;AAAA;AAAA,IACzB,mBAAmB,MAAM;AAAA;AAAA,MACvB;AAEJ,QAAM,WAAW,cAAc;AAC/B,QAAM,YAAY,IAAI,QAAQ,GAAG;AAEjC,QAAM,YAAY,aAAa,CAAE;AACjC,QAAM,aAAa,UAAU;AAE7B,QAAM,MAAwB;AAAA,IAC5B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA;AAGF,SAAO;AAEP,mBAAiB;AACf,aAAS,KAAK;AACd,eAAW,KAAK;AAAA;AAGlB,0BAAwB,OAAgC;AACtD,QAAI,GAAG;AACP,QAAI,iBAAiB,cAAc,MAAM,WAAW,MAAM,QAAQ,SAAS,GAAG;AAC5E,UAAiB,MAAO,QAAQ,GAAG;AACnC,UAAiB,MAAO,QAAQ,GAAG;AAAA,WAC9B;AACL,UAAiB,MAAO;AACxB,UAAiB,MAAO;AAAA;AAG1B,UAAM,OAAO,WAAW;AACxB,aAAS,IAAI,IAAI,KAAK;AACtB,aAAS,IAAI,IAAI,KAAK;AACtB,cAAU,IAAK,SAAS,IAAI,KAAK,QAAS,IAAI;AAC9C,cAAU,IAAI,WAAW,IAAI,KAAK,UAAU,IAAI;AAChD,cAAU,eAAe;AAAA;AAG3B,uBAAqB;AACnB,QAAI,iBAAiB,QAAQ;AAC3B,YAAM,aAAa,UAAU,UAAU,WAAW;AAClD,YAAM,aAAgC,CAAC,GAAG;AAC1C,YAAM,UAA2B;AAEjC,iBAAW,QAAQ,gBAAa;AA5HtC;AA6HQ,cAAM,CAAE,UAAW;AACnB,cAAM,CAAE,aAAc,OAAO;AAG7B,YAAI,kBAAkBC,iBAAe;AACnC,cAAI,QAAQ,QAAQ,YAAY;AAAI;AACpC,kBAAQ,KAAK;AAAA;AAGf,YAAI,CAAC,OAAO,SAAS,MAAM;AACzB,iBAAO,SAAS,OAAO;AACvB,gBAAM,YAA4C,CAAE,MAAM,eAAe,MAAM,MAAM,WAAW;AAChG,gBAAM,aAA6C,IAAK,WAAW,MAAM;AACzE,0BAAgB;AAChB,2BAAiB;AACjB,0BAAU,kBAAV,mCAA0B;AAC1B,0BAAU,mBAAV,mCAA2B;AAAA;AAG7B,cAAM,YAA4C,CAAE,MAAM,eAAe,WAAW;AACpF,wBAAgB;AAChB,wBAAU,kBAAV,mCAA0B;AAE1B,mBAAW,OAAO,WAAW,QAA0B,SAAU;AAAA;AAGnE,iBAAW,QAAQ,YAAU;AAvJnC;AAwJQ,cAAM,CAAE,aAAc,OAAO;AAC7B,YAAI,OAAO,SAAS,MAAM;AACxB,iBAAO,SAAS,OAAO;AACvB,gBAAM,YAA4C,CAAE,MAAM,eAAe,MAAM,OAAO;AACtF,gBAAM,aAA6C,IAAK,WAAW,MAAM;AACzE,0BAAgB;AAChB,2BAAiB;AACjB,0BAAU,kBAAV,mCAA0B;AAC1B,0BAAU,mBAAV,mCAA2B;AAAA;AAAA;AAAA;AAAA;AAMnC,wBAAsB,OAAgC;AACpD,mBAAe;AACf,YAAQ,CAAE,MAAM,gBAAgB,UAAU,WAAW;AAAA;AAGvD,uBAAqB,OAAgC;AACnD,mBAAe;AACf,WAAO,CAAE,MAAM,eAAe,UAAU,WAAW;AACnD;AAAA;AAGF,wBAAsB,OAAgC;AACpD,mBAAe;AACf,QAAI,iBAAiB,QAAQ;AAC3B,YAAM,aAAa,UAAU,UAAU,WAAW;AAClD,YAAM,UAA2B;AACjC,iBAAW,QAAQ,gBAAa;AAtLtC;AAuLQ,cAAM,CAAE,UAAW;AACnB,cAAM,CAAE,aAAc,OAAO;AAG7B,YAAI,kBAAkBA,iBAAe;AACnC,cAAI,QAAQ,QAAQ,YAAY;AAAI;AACpC,kBAAQ,KAAK;AAAA;AAGf,cAAM,SAAwC,CAAE,MAAM,SAAS,WAAW;AAC1E,yBAAiB;AACjB,wBAAU,YAAV,mCAAoB;AAAA;AAAA;AAGxB,YAAQ,CAAE,MAAM,SAAS,UAAU,WAAW;AAAA;AAGhD,0BAAwB;AACtB,QAAI;AAAY;AAChB,YAAQ,CAAE,MAAM;AAAA;AAGlB,0BAAwB;AACtB,eAAW,iBAAiB,cAAc;AAC1C,eAAW,iBAAiB,aAAa;AACzC,eAAW,iBAAiB,cAAc;AAC1C,eAAW,iBAAiB,SAAS;AACrC,QAAI,OAAO;AACT,iBAAW,iBAAiB,cAAc;AAC1C,iBAAW,iBAAiB,aAAa;AACzC,iBAAW,iBAAiB,YAAY;AAAA;AAE1C,QAAI,YAAY;AAAA;AAGlB,6BAA2B;AACzB,eAAW,oBAAoB,cAAc;AAC7C,eAAW,oBAAoB,aAAa;AAC5C,eAAW,oBAAoB,cAAc;AAC7C,eAAW,oBAAoB,SAAS;AAExC,eAAW,oBAAoB,cAAc;AAC7C,eAAW,oBAAoB,aAAa;AAC5C,eAAW,oBAAoB,YAAY;AAC3C,QAAI,YAAY;AAAA;AAAA;;kBCnLa,QAA8C;AAE7E,QAAM,SAA+B;AAAA,IACnC,WAAW;AAAA,IACX,OAAO;AAAA,IACP,WAAW;AAAA,IACX,WAAW;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA;AAGV,MAAI,QAAQ;AACV,WAAO,QAAQ,QAAQ,QAAQ,CAAC,CAAC,KAAK,WAAW;AAC/C,aAAO,OAAO;AAAA;AAAA;AAKlB,QAAM,OAAsB;AAAA,IAC1B,OAAO;AAAA,IAAG,QAAQ;AAAA,IAClB,QAAQ;AAAA,IAAG,SAAS;AAAA,IACpB,OAAO;AAAA;AAGT,QAAM,wBAAsC;AAE5C,QAAM,mBAAsC;AAE5C,QAAM,WAAW;AAGjB,QAAM,MAAsB;AAAA,IAC1B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAAoB;AAAA;AAGtB,SAAO;AAKP,4BAAyC;AACvC,UAAM,YAAW,IAAI,cAAc,CAAE,QAAQ,OAAO,QAAQ,WAAW,OAAO,WAAW,OAAO,OAAO;AACvG,cAAS,YAAY,OAAO;AAC5B,WAAO;AAAA;AAMT,kBAAgB;AACd,QAAI,CAAC,IAAI,OAAO;AACd,cAAQ,MAAM;AACd,aAAO;AAAA;AAGT,QAAI,CAAC,IAAI,QAAQ;AACf,cAAQ,MAAM;AACd,aAAO;AAAA;AAGT,QAAI,OAAO,QAAQ;AACjB;AACA,aAAO,iBAAiB,UAAU;AAAA,eACzB,OAAO,SAAS,OAAO,QAAQ;AACxC,cAAQ,OAAO,OAAO,OAAO;AAAA;AAG/B;AAEA,QAAI,OAAO,WAAW;AACpB,YAAM,aAAa,IAAI,cAAc,IAAI,QAAQ,IAAI,SAAS;AAC9D,UAAI,OAAO,qBAAqB,QAAQ;AACtC,eAAO,QAAQ,OAAO,WAAW,QAAQ,CAAC,CAAC,KAAK,WAAW;AAEzD,qBAAW,OAAO;AAAA;AAAA;AAGtB,qBAAe,MAAM;AAAE,mBAAW;AAAA;AAClC,UAAI,aAAa;AAAA;AAGnB,WAAO;AAAA;AAMT,yBAAuB;AACrB,QAAI,cAAsC;AAAA,MACxC,QAAQ,IAAI;AAAA,MACZ,YAAY,IAAI,SAAU;AAAA,MAC1B;AAAA;AAGF,QAAI,OAAO,WAAW,OAAO,mBAAmB,QAAQ;AACtD,oBAAc,IAAK,gBAAgB,OAAO;AAAA;AAG5C,UAAM,UAAU,IAAI,UAAU,WAAW;AACzC,QAAI,OAAO,WAAW,iBAAiB,QAAQ;AAC7C,cAAQ;AACR,UAAI,YAAY,kBAAkB,SAAS;AACzC,uBAAe,QAAQ;AAAA;AAAA;AAAA;AAQ7B,0BAAwB,IAAgB;AACtC,0BAAsB,KAAK;AAAA;AAM7B,oBAAkB;AAEhB,0BAAsB,QAAQ,OAAK;AACnC,QAAI,SAAU,OAAO,IAAI,OAAQ,IAAI;AAAA;AAMvC,qBAAmB;AAEjB,0BAAsB,QAAQ,OAAK;AACnC,QAAI,SAAU;AAAA;AAMhB,8BAA4B,GAAoB;AAC9C,QAAI,iBAAiB,QAAQ,OAAO,IAAI;AACtC,uBAAiB,KAAK;AAAA;AAGxB,QAAI,IAAI,WAAW,CAAC,IAAI,QAAQ,WAAW;AACzC,UAAI,QAAQ;AAAA;AAAA;AAOhB,iCAA+B,GAAoB;AACjD,UAAM,IAAI,iBAAiB,QAAQ;AACnC,QAAI,MAAM,IAAI;AACZ,uBAAiB,OAAO,GAAG;AAAA;AAG7B,QAAI,IAAI,WAAW,CAAC,OAAO,WAAW,iBAAiB,WAAW,GAAG;AACnE,UAAI,QAAQ;AAAA;AAAA;AAOhB,qBAAmB;AAEjB,WAAO,oBAAoB,UAAU;AACrC,QAAI,IAAI;AAAS,UAAI,QAAQ;AAC7B,QAAI,IAAI;AAAY,UAAI,WAAW;AACnC,QAAI,IAAI;AAAU,UAAI,SAAS;AAAA;AAMjC,sBAAoB;AAvOtB;AAwOI,QAAI,OAAO,WAAW,UAAU;AAC9B,cAAQ,OAAO,YAAY,OAAO;AAAA,WAC7B;AACL,YAAM,MAAM,IAAI,SAAU,WAAW;AACrC,UAAI;AAAK,gBAAQ,IAAI,aAAa,IAAI;AAAA;AAExC,iBAAO,aAAP,gCAAkB;AAAA;AAMpB,mBAAiB,OAAe,QAAgB;AAC9C,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,QAAQ,QAAQ;AAErB,QAAI,SAAU,QAAQ,OAAO,QAAQ;AAOrC,UAAM,SAAkB,IAAI;AAC5B,QAAI,OAAO,SAAS,qBAAqB;AACvC,YAAM,UAA8B;AACpC,cAAQ,SAAS,KAAK;AACtB,cAAQ;AAAA;AAGV,QAAI,OAAO,SAAS,sBAAsB;AACxC,YAAM,UAA+B;AACrC,WAAK,SAAS,QAAQ,QAAQ,QAAQ;AACtC,WAAK,UAAU,QAAQ,MAAM,QAAQ;AAAA,WAChC;AACL,YAAM,QAAQ;AACd,WAAK,SAAS,MAAM;AACpB,WAAK,UAAU,MAAM;AAAA;AAAA;AAOzB,2BAAyB;AACvB,UAAM,SAA6B,IAAI;AACvC,UAAM,OAAQ,OAAO,MAAM,KAAK,KAAM;AACtC,UAAM,IAAI,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,SAAS;AAC5D,UAAM,IAAI,IAAI,OAAO;AACrB,WAAO,CAAC,GAAG;AAAA;AAAA;;MCjMF,uBAAwD,OAAO;AAE5E,eAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,IACL,WAAW;AAAA,IACX,OAAO;AAAA,IACP,WAAW,CAAE,MAAM,SAAS,SAAS;AAAA,IACrC,WAAW,CAAE,MAAM,CAAC,SAAS,SAAwD,SAAS;AAAA,IAC9F,SAAS,CAAE,MAAM,CAAC,SAAS,SAA6D,SAAS;AAAA,IACjG,QAAQ,CAAE,MAAM,CAAC,SAAS,SAAuC,SAAS;AAAA,IAC1E,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,IAAI;AAAA,IACJ,SAAS;AAAA,IACT,SAAS;AAAA;AAAA,EAEX,MAAM,OAA+B;AACnC,UAAM,gBAAoC;AAC1C,UAAM,mBAA0C;AAChD,UAAM,wBAA8C;AACpD,UAAM,uBAA6C;AACnD,UAAM,kBAAwC;AAE9C,UAAM,SAAS,SAAS,cAAc;AACtC,UAAM,SAA+B;AAAA,MACnC;AAAA,MACA,WAAW,MAAM;AAAA,MACjB,OAAO,MAAM;AAAA,MACb,WAAW,MAAM;AAAA,MACjB,WAAW,MAAM;AAAA,MACjB,SAAS,MAAM;AAAA,MACf,QAAQ,MAAM;AAAA;AAGhB,QAAI,MAAM;AAAO,aAAO,QAAQ,SAAS,MAAM;AAC/C,QAAI,MAAM;AAAQ,aAAO,SAAS,SAAS,MAAM;AAEjD,UAAM,QAAQ,SAAS;AAEvB,UAAM,WAAuB,MAAM;AAAA;AAGnC,QAAI,MAAM,SAAS;AACjB,aAAO,iBAAiB,SAAS,MAAM;AAAA;AAGzC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,UAAU,MAAM;AAAA,MAChB,MAAM,MAAM;AAAA,MACZ;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,EAGJ,UAAU;AAAA,IACR,QAAQ;AAAA,MACN,KAAK,WAA+B;AAAE,eAAO,KAAK,MAAM;AAAA;AAAA,MACxD,KAAK,SAAS,QAAsB;AAAE,aAAK,MAAM,SAAS;AAAA;AAAA;AAAA,IAE5D,OAAO;AAAA,MACL,KAAK,WAA8B;AAAE,eAAO,KAAK,MAAM;AAAA;AAAA,MACvD,KAAK,SAAS,OAAoB;AAAE,aAAK,MAAM,QAAQ;AAAA;AAAA;AAAA,IAEzD,UAAU;AAAA,MACR,KAAK,WAAuC;AAAE,eAAO,KAAK,MAAM;AAAA;AAAA,MAChE,KAAK,SAAS,UAAgC;AAAE,aAAK,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA,EAG1E,UAAU;AACR,WAAO;AAAA,OACJ,uBAAiC;AAAA;AAAA;AAAA,EAGtC,UAAU;AA1KZ;AA4KI,SAAK,IAAI,WAAW,aAAa,KAAK,QAAQ,KAAK;AAEnD,QAAI,KAAK,MAAM,QAAQ;AAQrB,WAAK,MAAM,OAAO,WAAW,CAAC,SAAS;AACrC,aAAK,gBAAgB,QAAQ,OAAK,EAAE,CAAE,MAAM,UAAU,UAAU,MAAM;AAAA;AAIxE,WAAK,SAAS,UAAU,UAAU,KAAK;AAEvC,WAAK,WAAW,KAAK,MAAM,WAAW,KAAK,MAAM,UAAU,KAAK,MAAM;AAEtE,WAAK,cAAc,QAAQ,OAAK,EAAE,CAAE,MAAM,QAAQ,UAAU;AAC5D,iBAAK,YAAL,8BAAe;AAEf,UAAI,KAAK,IAAI;AACX,aAAK,SAAS,GAAG,UAAU;AAC3B,aAAK,SAAS,iBAAiB,KAAK;AAAA,aAC/B;AACL,8BAAsB,KAAK;AAAA;AAAA;AAI/B,SAAK,iBAAiB,QAAQ,OAAK,EAAE,CAAE,MAAM,WAAW,UAAU;AAAA;AAAA,EAEpE,gBAAgB;AACd,SAAK,OAAO;AACZ,SAAK,wBAAwB;AAC7B,SAAK,uBAAuB;AAC5B,SAAK,MAAM;AACX,SAAK,MAAM;AAAA;AAAA,EAEb,SAAS;AAAA,IACP,OAAO,IAAsB;AAAE,WAAK,YAAY,QAAQ;AAAA;AAAA,IACxD,UAAU,IAAyB;AAAE,WAAK,YAAY,WAAW;AAAA;AAAA,IACjE,eAAe,IAAwB;AAAE,WAAK,YAAY,gBAAgB;AAAA;AAAA,IAC1E,gBAAgB,IAAwB;AAAE,WAAK,eAAe,gBAAgB;AAAA;AAAA,IAC9E,cAAc,IAAwB;AAAE,WAAK,YAAY,eAAe;AAAA;AAAA,IACxE,eAAe,IAAwB;AAAE,WAAK,eAAe,eAAe;AAAA;AAAA,IAC5E,SAAS,IAAwB;AAAE,WAAK,YAAY,UAAU;AAAA;AAAA,IAC9D,UAAU,IAAwB;AAAE,WAAK,eAAe,UAAU;AAAA;AAAA,IAElE,YAAY,MAAc,IAAuB;AAC/C,YAAM,YAAY,KAAK,aAAa;AACpC,gBAAU,KAAK;AAAA;AAAA,IAGjB,eAAe,MAAc,IAAuB;AAClD,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,QAAQ,UAAU,QAAQ;AAChC,UAAI;AAAO,kBAAU,OAAO,OAAO;AAAA;AAAA,IAGrC,aAAa,MAAc;AACzB,UAAI,SAAS,QAAQ;AACnB,eAAO,KAAK;AAAA,iBACH,SAAS,WAAW;AAC7B,eAAO,KAAK;AAAA,iBACH,SAAS,gBAAgB;AAClC,eAAO,KAAK;AAAA,iBACH,SAAS,eAAe;AACjC,eAAO,KAAK;AAAA,aACP;AACL,eAAO,KAAK;AAAA;AAAA;AAAA,IAIhB,OAAO,MAAc;AACnB,WAAK,sBAAsB,QAAQ,OAAK,EAAE,CAAE,MAAM,gBAAgB,UAAU,MAAM;AAElF,WAAK;AACL,WAAK,qBAAqB,QAAQ,OAAK,EAAE,CAAE,MAAM,eAAe,UAAU,MAAM;AAAA;AAAA,IAElF,WAAW,MAAc;AACvB,UAAI,KAAK;AAAK,8BAAsB,KAAK;AACzC,WAAK,OAAO;AAAA;AAAA;AAAA,EAGhB,SAAS;AACP,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY;AAAA;AAAA,EAEvD,SAAS;AAAA;;qBCjQiB,GAA4B,MAAqC;AAC3F,MAAI,gBAAgB,QAAQ;AAC1B,WAAO,QAAQ,MAAM,QAAQ,CAAC,CAAC,KAAK,WAAW;AAC7C,QAAE,OAAO;AAAA;AAAA;AAAA;mBAKW,KAAU,OAAiB,KAAgB;AACnE,QAAM,QAAQ,UAAQ;AACpB,aAAS,KAAK,MAAM,KAAK;AAAA;AAAA;kBAIJ,KAAU,SAAiB,KAAU,SAAwB;AACpF,QAAM,WAAW,WAAW;AAC5B,QAAM,MAAM,MAAM,KAAK;AACvB,MAAI,IAAI,iBAAiB,QAAQ;AAC/B,gBAAY,IAAI,WAAW,IAAI;AAC/B,UAAM,KAAK,CAAC,UAAU;AAAE,kBAAY,IAAI,WAAW;AAAA,OAAU,CAAE,MAAM;AAAA,SAChE;AACL,QAAI,IAAI;AAAO,UAAI,YAAY,IAAI;AACnC,UAAM,KAAK,CAAC,UAAU;AAAE,UAAI,YAAY;AAAA;AAAA;AAAA;qBAIhB,OAAgC,UAAoB,IAA6B;AAC3G,QAAM,SAAkC;AACxC,SAAO,QAAQ,OAAO,QAAQ,CAAC,CAAC,KAAK,WAAW;AAC9C,QAAI,CAAC,WAAY,WAAW,CAAC,QAAQ,SAAS,MAAO;AACnD,aAAO,OAAO;AAAA;AAAA;AAGlB,SAAO;AAAA;cAGY,QAAgB,QAAgB,QAAwB;AAC3E,WAAS,SAAS,IAAI,IAAI;AAC1B,WAAS,SAAS,IAAI,IAAI;AAC1B,SAAO,SAAU,UAAS,UAAU;AAAA;eAGhB,KAAa,KAAa,KAAqB;AACnE,SAAO,MAAM,MAAM,MAAO,MAAM,MAAM,MAAM;AAAA;AAI9C,MAAM,cAAc;AACpB,MAAM,iBAAiB;sBAEM,OAAO,gBAAgB,SAAS,MAAc;AACzE,QAAM,WAAW,GAAG,OAAO,sBAAsB;AACjD,SAAO,GAAG,eAAe,UAAU;AAAA;AAGrC,+BAA+B,QAAgB;AAC7C,UAAQ;AAAA,SACD;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA,SACJ;AACH,aAAO;AAAA;AAEP,aAAO;AAAA;AAAA;;AC3Db,aAAe,gBAAgB;AAAA,EAU7B,SAAS;AACP,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY;AAAA;AAAA;;ACdzD,yBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,MAAM;AAAA,EACN,OAAO;AAAA,IACL,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,IAChC,KAAK,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC9B,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,IACjC,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,KAAK,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC9B,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,UAAU,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,EAE/F,MAAM,OAAO;AACX,UAAM,WAAW,OAAO;AACxB,QAAI,CAAC,UAAU;AACb,cAAQ,MAAM;AACd;AAAA;AAGF,UAAM,SAAS,IAAIC,qBAAmB,MAAM,MAAM,MAAM,OAAO,MAAM,KAAK,MAAM,QAAQ,MAAM,MAAM,MAAM;AAC1G,aAAS,SAAS;AAElB,aAAS,OAAO,YAAY;AAE5B,UAAM,aAAa,CAAC,QAAQ,SAAS,OAAO,UAAU,QAAQ,OAAO;AACrE,eAAW,QAAQ,OAAK;AAEtB,YAAM,MAAM,MAAM,IAAI,CAAC,UAAU;AAE/B,eAAO,KAAK;AACZ,eAAO;AAAA;AAAA;AAIX,WAAO,CAAE,UAAU;AAAA;AAAA,EAErB,SAAS;AAAA;;ACrCX,wBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,MAAM;AAAA,EACN,OAAO;AAAA,IACL,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,IACjC,KAAK,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC9B,KAAK,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC9B,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,UAAU,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,IAC7F,QAAQ,CAAE,MAAM,QAA0C,SAAS;AAAA;AAAA,EAErE,MAAM,OAAO;AAlBf;AAmBI,UAAM,WAAW,OAAO;AACxB,QAAI,CAAC,UAAU;AACb,cAAQ,MAAM;AACd;AAAA;AAGF,UAAM,SAAS,IAAIC,oBAAkB,MAAM,KAAK,MAAM,QAAQ,MAAM,MAAM,MAAM;AAChF,aAAS,SAAS;AAElB,aAAS,OAAO,YAAY;AAE5B,QAAI,MAAM;AAAQ,aAAO,OAAO,YAAM,OAAO,MAAb,YAAkB,GAAG,MAAM,OAAO,GAAG,MAAM,OAAO;AAClF,UAAM,MAAM,MAAM,QAAQ,CAAC,MAAM;AA/BrC;AA+BuC,aAAO,OAAO,SAAE,MAAF,aAAO,GAAG,EAAE,GAAG,EAAE;AAAA,OAAM,CAAE,MAAM;AAEhF,UAAM,aAAa,CAAC,UAAU,OAAO,OAAO;AAC5C,eAAW,QAAQ,OAAK;AAEtB,YAAM,MAAM,MAAM,IAAI,CAAC,UAAU;AAE/B,eAAO,KAAK;AACZ,eAAO;AAAA;AAAA;AAIX,WAAO,CAAE,UAAU;AAAA;AAAA,EAErB,SAAS;AAAA;;MCzCE,oBAAyC,OAAO;AAE7D,YAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,IACL,YAAY,CAAC,QAAQ,QAAQ;AAAA;AAAA,EAE/B,MAAM,OAAO;AACX,UAAM,WAAW,OAAO;AACxB,UAAM,QAAQ,IAAIC;AAElB,QAAI,CAAC,UAAU;AACb,cAAQ,MAAM;AACd;AAAA;AAGF,aAAS,QAAQ;AACjB,YAAQ,mBAAmB;AAE3B,UAAM,gBAAgB,CAAC,UAAqB;AAC1C,UAAI,CAAC;AAAO;AACZ,UAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AAC1D,YAAI,MAAM,sBAAsB;AAAO,gBAAM,WAAW,IAAI;AAAA;AACvD,gBAAM,aAAa,IAAI,MAAM;AAAA,iBACzB,iBAAiBC,WAAS;AACnC,cAAM,aAAa;AAAA;AAAA;AAIvB,kBAAc,MAAM;AACpB,UAAM,MAAM,MAAM,YAAY;AAE9B,UAAM,MAAM,CAAC,MAAsB;AAAE,YAAM,IAAI;AAAA;AAC/C,UAAM,SAAS,CAAC,MAAsB;AAAE,YAAM,OAAO;AAAA;AAErD,WAAO,CAAE,OAAO,KAAK;AAAA;AAAA,EAEvB,SAAS;AACP,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY;AAAA;AAAA,EAEvD,SAAS;AAAA;;ACLX,eAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EAEN,QAAQ;AAAA,IACN,UAAU;AAAA,IACV,OAAO;AAAA;AAAA,EAET,OAAO,CAAC,WAAW;AAAA,EACnB,OAAO;AAAA,IACL,UAAU,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,IAC7F,UAAU,CAAE,MAAM,QAAwC,SAAS,QAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,IAC3F,OAAO,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,OAAO;AAAA,IACpG,QAAQ,CAAE,MAAM,QAA0C,SAAS;AAAA,IACnE,YAAY,CAAE,MAAM,SAAS,SAAS;AAAA,IACtC,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAO;AAAA,EAE5C,QAAgC;AAE9B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,QAAI,CAAC,KAAK,UAAU;AAClB,cAAQ,MAAM;AAAA;AAEhB,QAAI,CAAC,KAAK,OAAO;AACf,cAAQ,MAAM;AAAA;AAAA;AAAA,EAGlB,YAAY;AACV,QAAI,KAAK;AAAY,WAAK;AAAA;AAAA,EAE5B,SAAS;AAAA,IACP,aAAa,KAAe;AAvEhC;AAwEM,WAAK,MAAM;AAEX,WAAK,MAAM,WAAW;AAEtB,eAAS,MAAM,YAAY;AAC3B,eAAS,MAAM,YAAY;AAC3B,eAAS,MAAM,SAAS;AACxB,eAAS,MAAM,YAAY,IAAI;AAE/B,UAAI,KAAK;AAAQ,YAAI,OAAO,WAAK,OAAO,MAAZ,YAAiB,GAAG,KAAK,OAAO,GAAG,KAAK,OAAO;AAC3E,YAAM,MAAM,KAAK,QAAQ,CAAC,MAAM;AAlFtC;AAkFwC,YAAI,OAAO,SAAE,MAAF,aAAO,GAAG,EAAE,GAAG,EAAE;AAAA,SAAM,CAAE,MAAM;AAE5E,WAAK,SAAS,KAAK;AACnB,UAAI,KAAK;AAAe,aAAK,MAAM,SAAS;AAAA;AACvC,gBAAQ,MAAM;AAAA;AAAA,IAErB,YAAiD;AAC/C,UAAI,SAAS,KAAK;AAClB,aAAO,QAAQ;AACb,YAAK,OAAe;AAAK,iBAAO;AAChC,iBAAS,OAAO;AAAA;AAElB,aAAO;AAAA;AAAA,IAET,YAAY,GAAc;AACxB,YAAM,MAAM,KAAK,KAAK;AACtB,UAAI,KAAK,QAAQ;AACf,QAAC,KAAK,OAAe,IAAI;AACzB,eAAO;AAAA;AAET,aAAO;AAAA;AAAA,IAET,iBAAiB,GAAc;AAC7B,YAAM,MAAM,KAAK,KAAK;AACtB,UAAI,KAAK,QAAQ;AACf,QAAC,KAAK,OAAe,OAAO;AAC5B,eAAO;AAAA;AAET,aAAO;AAAA;AAAA,IAET,IAAI,GAAa;AAhHrB;AAgHuB,iBAAK,QAAL,mBAAU,IAAI;AAAA;AAAA,IACjC,OAAO,GAAa;AAjHxB;AAiH0B,iBAAK,QAAL,mBAAU,OAAO;AAAA;AAAA;AAAA,EAEzC,SAAS;AACP,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY;AAAA;AAAA,EAEvD,SAAS;AAAA;;AClHX,YAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AACN,WAAO;AAAA,MACL,OAAO,IAAIC;AAAA;AAAA;AAAA,EAGf,UAAU;AACR,SAAK,aAAa,KAAK;AAAA;AAAA,EAEzB,SAAS;AAAA;;ACTX,MAAM,gBAA8C,MAAM;AAAA;AAO1D,gBAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,IACL,gBAAgB,CAAE,MAAM,UAAoD,SAAS;AAAA,IACrF,eAAe,CAAE,MAAM,UAAoD,SAAS;AAAA,IACpF,eAAe,CAAE,MAAM,UAAoD,SAAS;AAAA,IACpF,gBAAgB,CAAE,MAAM,UAAoD,SAAS;AAAA,IACrF,SAAS,CAAE,MAAM,UAAoD,SAAS;AAAA,IAC9E,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA;AAAA,EAE1C,QAAiC;AAC/B,UAAM,WAAW,OAAO;AACxB,WAAO,CAAE;AAAA;AAAA,EAEX,UAAU;AACR,QAAI,CAAC,KAAK,UAAU;AAClB,cAAQ,MAAM;AACd;AAAA;AAEF,UAAM,WAAW,KAAK;AAEtB,SAAK,SAAS,UAAU,MAAM;AAC5B,UAAI,CAAC,SAAS;AAAQ;AAEtB,WAAK,UAAU,WAAW;AAAA,QACxB,QAAQ,SAAS;AAAA,QACjB,YAAY,SAAS;AAAA,QACrB,kBAAkB,KAAK;AAAA,QACvB,kBAAkB,KAAK;AAAA,QACvB,iBAAiB,KAAK;AAAA,QACtB,iBAAiB,KAAK;AAAA,QACtB,kBAAkB,KAAK;AAAA,QACvB,kBAAkB,KAAK;AAAA;AAEzB,WAAK,QAAQ;AAEb,UAAI,KAAK,kBAAkB,SAAS;AAClC,iBAAS,eAAe,KAAK,QAAQ;AAAA;AAAA;AAAA;AAAA,EAI3C,YAAY;AAtDd;AAuDI,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ;AACb,iBAAK,aAAL,mBAAe,gBAAgB,KAAK,QAAQ;AAAA;AAAA;AAAA,EAGhD,SAAS;AAAA,IACP,sBAAsB;AACpB,UAAI,KAAK,YAAY,KAAK,SAAS,OAAO;AACxC,cAAM,WAAW,KAAK,SAAS,MAAM,SAAS,OAAO,CAAC,MAAgB,CAAC,QAAQ,iBAAiB,SAAS,EAAE;AAC3G,eAAO;AAAA;AAET,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AACP,WAAO;AAAA;AAAA,EAET,SAAS;AAAA;;AC9DX,iBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,YAAY,CAAE,MAAM,QAAQ,SAAS;AAAA,IACrC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,IACzC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,IACxC,YAAY;AAAA;AAAA,EAEd,MAAM,OAAO;AACX,UAAM,YAAY,OAAO;AACzB,QAAI,CAAC,aAAa,CAAC,UAAU,OAAO;AAClC,cAAQ,MAAM;AACd;AAAA;AAGF,UAAM,WAAW,UAAU,UAAU,QAAQ,UAAU;AACvD,UAAM,SAAS,IAAI,sBAAsB,MAAM,YAAY,CAAE,QAAQ,WAAW,iBAAiB,MAAM,WAAW;AAClH,UAAM,aAAa,IAAIC,aAAW,MAAM,gBAAgB,MAAM,eAAe;AAC7E,UAAM,WAAW,MAAM;AAAE,iBAAW,OAAO,UAAU;AAAA;AAErD,QAAI,MAAM,YAAY;AACpB,gBAAU,eAAe;AACzB,kBAAY,MAAM;AAAE,kBAAU,gBAAgB;AAAA;AAAA,WACzC;AACL,gBAAU,UAAU;AAAA;AAGtB,WAAO,CAAE,QAAQ;AAAA;AAAA,EAEnB,SAAS;AACP,WAAO;AAAA;AAAA,EAET,SAAS;AAAA;;MCrCE,eAAe;AAAA,EAC1B,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,aAAa;AAAA,EACb,SAAS;AAAA;MAeE,mBAAgD,OAAO;MAE9D,OAAO,gBAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,SAAS;AAAA,EACT,OAAO;AAAA,IACL,YAAY;AAAA,IACZ,eAAe;AAAA,OACZ;AAAA;AAAA,EAEL,QAA4B;AAC1B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,WAAO;AAAA,OACJ,mBAA6B;AAAA;AAAA;AAAA,EAGlC,UAAU;AAER,QAAI,CAAC,KAAK,QAAQ,CAAC,KAAK;AAAS,WAAK;AAAA;AAAA,EAExC,SAAS;AAAA,IACP,WAAW;AACT,YAAM,OAAO,IAAIC,OAAM,KAAK,UAAU,KAAK;AAC3C,WAAK,SAAS,YAAY;AAE1B,eAAS,MAAM,cAAc;AAC7B,eAAS,MAAM,iBAAiB;AAEhC,UAAI,KAAK,kBACP,KAAK,iBACL,KAAK,iBACL,KAAK,kBACL,KAAK,iBACL,KAAK,eACL,KAAK,SAAS;AACd,YAAI,KAAK;AAAU,eAAK,SAAS,MAAM,mBAAmB;AAAA;AAG5D,WAAK,OAAO;AACZ,WAAK,aAAa;AAAA;AAAA,IAEpB,iBAAiB;AAAA;AAAA,IACjB,oBAAoB,OAAwC;AAC1D,aAAO,KAAK,OAAO,QAAQ,UAAQ;AAEjC,cAAM,MAAM,KAAK,OAAO,MAAM;AAC5B,eAAK;AAAA;AAAA;AAAA;AAAA,IAIX,YAAY,UAA0B;AACpC,WAAK,WAAW;AAChB,UAAI,KAAK;AAAM,aAAK,KAAK,WAAW;AAAA;AAAA,IAEtC,YAAY,UAAoB;AAC9B,WAAK,WAAW;AAChB,UAAI,KAAK;AAAM,aAAK,KAAK,WAAW;AAAA;AAAA,IAEtC,kBAAkB;AAChB,YAAM,SAAS,KAAK;AACpB,WAAK;AACL,UAAI,KAAK,QAAQ,KAAK;AAAU,aAAK,KAAK,WAAW,KAAK;AAC1D,uCAAQ;AAAA;AAAA;AAAA,EAGZ,YAAY;AACV,QAAI,KAAK,MAAM;AACb,UAAI,KAAK;AAAU,aAAK,SAAS,MAAM,sBAAsB,KAAK;AAAA;AAGpE,QAAI,KAAK;AAAU,WAAK,SAAS;AACjC,QAAI,KAAK;AAAU,WAAK,SAAS;AAAA;AAAA,EAEnC,SAAS;AAAA;uBAOT,MACA,OACA,gBACA;AACA,SAAO,gBAAgB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,UAAU;AACR,WAAK;AACL,WAAK,oBAAoB;AAAA;AAAA,IAE3B,SAAS;AAAA,MACP,iBAAiB;AACf,aAAK,WAAW,eAAe;AAAA;AAAA;AAAA;AAAA;;AC3GvC,MAAM,WAAW,gBAAgB;AAAA,EAC/B,OAAO;AAAA,IACL,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA;AAAA,EAGX,QAAQ;AAAA,IACN,MAAM;AAAA;AAAA,EAER,QAAgC;AAC9B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,QAAI,CAAC,KAAK,MAAM;AACd,cAAQ,MAAM;AACd;AAAA;AAGF,SAAK;AACL,SAAK;AACL,QAAI,KAAK;AAAU,WAAK,KAAK,YAAY,KAAK;AAE9C,WAAO,KAAK,KAAK,QAAQ,QAAQ,UAAQ;AAEvC,YAAM,MAAM,KAAK,OAAO,KAAK;AAAA;AAAA;AAAA,EAGjC,YAAY;AA5Cd;AA6CI,eAAK,aAAL,mBAAe;AAAA;AAAA,EAEjB,SAAS;AAAA,IACP,iBAAiB;AAAA;AAAA,IACjB,iBAAiB;AACf,UAAI,CAAC,KAAK;AAAU;AACpB,UAAI,KAAK;AAAS,aAAK,SAAS,QAAQ,KAAK;AAC7C,UAAI,KAAK;AAAS,aAAK,SAAS,QAAQ,KAAK;AAC7C,UAAI,KAAK;AAAS,aAAK,SAAS,QAAQ,KAAK;AAAA;AAAA,IAE/C,kBAAkB;AAChB,YAAM,SAAS,KAAK;AACpB,WAAK;AACL,WAAK;AACL,UAAI,KAAK,YAAY,KAAK;AAAM,aAAK,KAAK,YAAY,KAAK;AAC3D,uCAAQ;AAAA;AAAA;AAAA,EAGZ,SAAS;AAAE,WAAO;AAAA;AAAA;2BAOlB,MACA,OACA,gBACA;AACA,SAAO,gBAAgB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,SAAS;AAAA,MACP,iBAAiB;AACf,aAAK,WAAW,eAAe;AAAA;AAAA;AAAA;AAAA;;MC7E1BC,UAAQ;AAAA,EACnB,MAAM;AAAA,EACN,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,EAChC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,EAChC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,EACxC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGX,MAAwB;AACrD,MAAI,KAAK,MAAM;AACb,WAAO,IAAIC,cAAY,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,eAAe,KAAK,gBAAgB,KAAK;AAAA,SACjG;AACL,WAAO,IAAIA,cAAY,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAO,KAAK,eAAe,KAAK,gBAAgB,KAAK;AAAA;AAAA;AAI9G,kBAAe,kBAAkB,eAAeD,SAAOE;;MClB1CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,EACnC,YAAY,CAAE,MAAM,QAAQ,SAAS;AAAA,EACrC,aAAa,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA;0BAGnB,MAA2B;AACxD,SAAO,IAAIG,iBAAe,KAAK,QAAQ,KAAK,UAAU,KAAK,YAAY,KAAK;AAAA;AAG9E,qBAAe,kBAAkB,kBAAkBH,SAAOE;;MCX7CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,WAAW,CAAE,MAAM,SAAS,SAAS;AAAA,EACrC,YAAY,CAAE,MAAM,QAAQ,SAAS;AAAA,EACrC,aAAa,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA;0BAGnB,MAAyB;AACtD,SAAO,IAAII,eAAa,KAAK,QAAQ,KAAK,QAAQ,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,WAAW,KAAK,YAAY,KAAK;AAAA;AAGpI,mBAAe,kBAAkB,gBAAgBJ,SAAOE;;MCd3CF,UAAQ;AAAA,EACnB,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,EACpC,cAAc,CAAE,MAAM,QAAQ,SAAS;AAAA,EACvC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,WAAW,CAAE,MAAM,SAAS,SAAS;AAAA,EACrC,YAAY,CAAE,MAAM,QAAQ,SAAS;AAAA,EACrC,aAAa,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA;0BAGnB,MAA6B;AAC1D,SAAO,IAAIK,mBAAiB,KAAK,WAAW,KAAK,cAAc,KAAK,QAAQ,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,WAAW,KAAK,YAAY,KAAK;AAAA;AAG9J,uBAAe,kBAAkB,oBAAoBL,SAAOE;;MCf/CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGJ,MAAiC;AAC9D,SAAO,IAAIM,uBAAqB,KAAK,QAAQ,KAAK;AAAA;AAGpD,2BAAe,kBAAkB,wBAAwBN,SAAOE;;MCTnDF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGJ,MAAgC;AAC7D,SAAO,IAAIO,sBAAoB,KAAK,QAAQ,KAAK;AAAA;AAGnD,0BAAe,kBAAkB,uBAAuBP,SAAOE;;MCTlDF,UAAQ;AAAA,EACnB,QAAQ;AAAA,EACR,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,EACnC,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,EACnC,WAAW,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA;0BAGjB,MAA0B;AACvD,SAAO,IAAIQ,gBAAc,KAAK,QAAQ,KAAK,UAAU,KAAK,UAAU,KAAK;AAAA;AAG3E,oBAAe,kBAAkB,iBAAiBR,SAAOE;;MCX5CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGJ,MAA+B;AAC5D,SAAO,IAAIS,qBAAmB,KAAK,QAAQ,KAAK;AAAA;AAGlD,yBAAe,kBAAkB,sBAAsBT,SAAOE;;MCTjDF,UAAQ;AAAA,EACnB,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,EAChC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,EACxC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGZ,MAA0B;AACvD,SAAO,IAAIU,gBAAc,KAAK,OAAO,KAAK,QAAQ,KAAK,eAAe,KAAK;AAAA;AAG7E,oBAAe,kBAAkB,iBAAiBV,SAAOE;;MCX5CF,UAAQ;AAAA,EACnB,UAAU;AAAA,EACV,SAAS;AAAA,EACT,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGJ,MAA+B;AAC5D,SAAO,IAAIW,qBAAmB,KAAK,UAAU,KAAK,SAAS,KAAK,QAAQ,KAAK;AAAA;AAG/E,yBAAe,kBAAkB,sBAAsBX,SAAOE;;MCXjDF,UAAQ;AAAA,EACnB,aAAa,CAAE,MAAM,QAAQ,SAAS;AAAA,EACtC,aAAa,CAAE,MAAM,QAAQ,SAAS;AAAA,EACtC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,EACxC,aAAa,CAAE,MAAM,QAAQ,SAAS;AAAA,EACtC,YAAY,CAAE,MAAM,QAAQ,SAAS;AAAA,EACrC,aAAa,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA;0BAGnB,MAAyB;AACtD,SAAO,IAAIY,eAAa,KAAK,aAAa,KAAK,aAAa,KAAK,eAAe,KAAK,aAAa,KAAK,YAAY,KAAK;AAAA;AAG1H,mBAAe,kBAAkB,gBAAgBZ,SAAOE;;MCb3CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,EACxC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGZ,MAA2B;AACxD,SAAO,IAAIa,iBAAe,KAAK,QAAQ,KAAK,eAAe,KAAK;AAAA;AAGlE,qBAAe,kBAAkB,kBAAkBb,SAAOE;;MCV7CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGJ,MAAgC;AAC7D,SAAO,IAAIc,sBAAoB,KAAK,QAAQ,KAAK;AAAA;AAGnD,0BAAe,kBAAkB,uBAAuBd,SAAOE;;MCTlDF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC/B,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,iBAAiB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC1C,KAAK,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA;0BAGX,MAA0B;AACvD,SAAO,IAAIe,gBAAc,KAAK,QAAQ,KAAK,MAAM,KAAK,gBAAgB,KAAK,iBAAiB,KAAK;AAAA;AAGnG,oBAAe,kBAAkB,iBAAiBf,SAAOE;;MCZ5CF,UAAQ;AAAA,EACnB,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC/B,iBAAiB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC1C,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,GAAG,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC5B,GAAG,CAAE,MAAM,QAAQ,SAAS;AAAA;0BAGC,MAA8B;AAC3D,SAAO,IAAIgB,oBAAkB,KAAK,QAAQ,KAAK,MAAM,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,GAAG,KAAK;AAAA;AAG/G,wBAAe,kBAAkB,qBAAqBhB,SAAOE;;MCZhDF,UAAQ;AAAA,EACnB,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,iBAAiB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC1C,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,QAAQ,CAAE,MAAM,SAAS,SAAS;AAAA;wBAGL,MAAyB;AACtD,MAAI;AACJ,MAAI,KAAK,QAAQ;AACf,YAAQ,IAAI,iBAAiB,KAAK;AAAA,aACzB,KAAK,MAAM;AACpB,YAAQ,KAAK;AAAA,SACR;AACL,YAAQ,MAAM;AAAA;AAEhB,SAAO,IAAIiB,eAAa,OAAO,KAAK,iBAAiB,KAAK,QAAQ,KAAK,gBAAgB,KAAK;AAAA;AAG9F,mBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTjB;AAAA,EACA,SAAS;AAAA,IACP,iBAAiB;AACf,WAAK,WAAW,eAAe;AAAA;AAAA,IAGjC,aAAa,QAAmB;AAC9B,+BAAyB,KAAK,UAA0B;AAAA;AAAA;AAAA;kCAKrB,MAAoB,QAAyB;AACpF,QAAM,QAAQ,IAAI,iBAAiB;AACnC,QAAM,CAAE,gBAAgB,QAAQ,iBAAiB,UAAW,KAAK;AACjE,QAAM,SAAS,MAAM,oBAAoB,iBAAiB;AAC1D,OAAK,WAAW,OAAO;AACvB,OAAK,UAAU,OAAO;AACtB,OAAK,YAAY,OAAO;AACxB,OAAK,WAAW,OAAO;AAEvB,QAAM,aAAa,KAAK,aAAa;AACrC,QAAM,aAAa,KAAK,aAAa;AAErC,QAAM,SAAS,IAAI;AACnB,QAAM,IAAI,IAAI;AAEd,WAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACxC,kBAAc;AAAA;AAEhB,gBAAc;AAEd,OAAK,WAAW,SAAS,cAAc;AACvC,OAAK,WAAW,OAAO,cAAc;AAErC,yBAAuB,GAAW;AAChC,UAAM,WAAW,IAAI,iBAAiB;AACtC,UAAM,IAAI,OAAO,QAAQ;AACzB,UAAM,IAAI,OAAO,UAAU;AAC3B,aAAS,IAAI,GAAG,KAAK,gBAAgB,KAAK;AACxC,YAAM,IAAI,IAAI,iBAAiB,KAAK,KAAK;AACzC,YAAM,MAAM,KAAK,IAAI;AACrB,YAAM,MAAM,CAAC,KAAK,IAAI;AACtB,aAAO,IAAK,MAAM,EAAE,IAAI,MAAM,EAAE;AAChC,aAAO,IAAK,MAAM,EAAE,IAAI,MAAM,EAAE;AAChC,aAAO,IAAK,MAAM,EAAE,IAAI,MAAM,EAAE;AAChC,aAAO;AACP,YAAM,QAAS,sBAAsB,KAAK;AAC1C,iBAAW,OAAO,OAAO,OAAO,GAAG,OAAO,GAAG,OAAO;AACpD,iBAAW,OAAO,OAAO,EAAE,IAAI,SAAS,OAAO,GAAG,EAAE,IAAI,SAAS,OAAO,GAAG,EAAE,IAAI,SAAS,OAAO;AAAA;AAAA;AAAA;;ACnEvG,YAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,MAAM;AAAA,EACN,OAAO;AAAA,IACL,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,IAChC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,IACpC,YAAY,CAAE,MAAM,SAAS,SAAS;AAAA,IACtC,eAAe,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,KAAK,GAAG;AAAA,IAC9F,cAAc,CAAE,MAAM,QAAQ,SAAS;AAAO;AAAA,EAEhD,QAA6B;AAC3B,WAAO;AAAA;AAAA,EAET,YAAY;AACV,QAAI,KAAK,iBAAiBkB,eAAa,KAAK,iBAAiBC,oBAAkB;AAC7E,WAAK,iBAAiB,KAAK,MAAM;AAAA;AAAA;AAAA,EAGrC,SAAS;AAAA,IACP,UAAU,OAAc;AACtB,WAAK,QAAQ;AAEb,UAAK,MAAc,QAAQ;AACzB,cAAM,aAAa,KAAK;AAExB,oBAAY,MAAM,OAAO,SAAS,KAAK;AAEvC,oBAAY,MAAM,OAAO,QAAQ,KAAK;AAAA;AAGxC,OAAC,SAAS,aAAa,cAAc,QAAQ,OAAK;AAEhD,cAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAC9B,cAAI,MAAM,SAAS;AACjB,kBAAM,MAAM,IAAI;AAAA,iBACX;AAEL,kBAAM,KAAK;AAAA;AAAA;AAAA;AAKjB,WAAK,aAAa;AAElB,UAAI,iBAAiBD,eAAa,iBAAiBC,oBAAkB;AACnE,iBAAS,MAAM,UAAU,MAAM,QAAQ;AACvC,aAAK,YAAY,MAAM;AAAA;AAAA;AAAA;AAAA,EAI7B,SAAS;AAAA;;ACvDX,mBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,UAAU;AACR,SAAK,UAAU,IAAIC,eAAa,KAAK,OAAO,KAAK;AAAA;AAAA,EAEnD,SAAS;AAAA;;ACJX,uBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,QAAQ,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAAA,EAE7F,UAAU;AACR,SAAK,UAAU,IAAID,mBAAiB,KAAK,OAAO,KAAK;AAAA;AAAA,EAEvD,SAAS;AAAA;;ACTX,sBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,aAAa,CAAE,MAAM,QAAQ,SAAS;AAAA;AAAA,EAExC,UAAU;AACR,UAAM,QAAQ,IAAIE,kBAAgB,KAAK,OAAO,KAAK,aAAa,KAAK;AACrE,UAAM,MAAM,KAAK,aAAa,CAAC,UAAU;AAAE,YAAM,YAAY,IAAI;AAAA;AACjE,SAAK,UAAU;AAAA;AAAA,EAEjB,SAAS;AAAA;;ACVX,iBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,IACnC,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA;AAAA,EAElC,UAAU;AACR,SAAK,UAAU,IAAIC,aAAW,KAAK,OAAO,KAAK,WAAW,KAAK,UAAU,KAAK;AAAA;AAAA,EAEhF,SAAS;AAAA;;ACPX,oBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,IAChC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,IACjC,QAAQ;AAAA;AAAA,EAEV,UAAU;AACR,6BAAyB;AACzB,UAAM,QAAQ,IAAIC,gBAAc,KAAK,OAAO,KAAK,WAAW,KAAK,OAAO,KAAK;AAE7E,UAAM,aAAa,CAAC,SAAS;AAC7B,eAAW,QAAQ,OAAK;AAEtB,YAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAAE,cAAM,KAAK;AAAA;AAAA;AAG/C,QAAI,KAAK,QAAQ;AACf,YAAM,cAAc,IAAI,oBAAoB;AAC5C,YAAM,IAAI;AAAA;AAGZ,SAAK,UAAU;AAAA;AAAA,EAEjB,SAAS;AAAA;;AC1BX,gBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,OAAO,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK;AAAA,IAC1C,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,IAChC,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,IACnC,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,IACnC,QAAQ;AAAA;AAAA,EAEV,UAAU;AACR,UAAM,QAAQ,IAAIL,YAAU,KAAK,OAAO,KAAK,WAAW,KAAK,UAAU,KAAK,OAAO,KAAK,UAAU,KAAK;AAEvG,UAAM,aAAa,CAAC,SAAS,SAAS,YAAY;AAClD,eAAW,QAAQ,OAAK;AAEtB,YAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAAE,cAAM,KAAK;AAAA;AAAA;AAG/C,SAAK,UAAU;AAAA;AAAA,EAEjB,SAAS;AAAA;;MCTE,uBAAwD,OAAO;AAE5E,eAAe,gBAAgB;AAAA,EAE7B,QAAQ;AAAA,IACN,MAAM;AAAA;AAAA,EAER,OAAO;AAAA,IACL,OAAO,CAAE,MAAM,CAAC,QAAQ,SAAS,SAAS;AAAA,IAC1C,WAAW,CAAE,MAAM,SAAS,SAAS;AAAA,IACrC,YAAY,CAAE,MAAM,SAAS,SAAS;AAAA,IACtC,KAAK,CAAE,MAAM,SAAS,SAAS;AAAA,IAC/B,SAAS,CAAE,MAAM,QAAQ,SAAS;AAAA,IAClC,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,aAAa;AAAA,IACb,cAAc;AAAA;AAAA,EAEhB,QAAgC;AAC9B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,WAAO;AAAA,OACJ,uBAAiC;AAAA;AAAA;AAAA,EAGtC,UAAU;AACR,QAAI,CAAC,KAAK,MAAM;AACd,cAAQ,MAAM;AACd;AAAA;AAGF,QAAI,KAAK,gBAAgB;AACvB,WAAK,WAAW,KAAK;AACrB,WAAK,KAAK,YAAY,KAAK;AAC3B,WAAK;AAAA;AAAA;AAAA,EAGT,YAAY;AApDd;AAqDI,eAAK,aAAL,mBAAe;AAAA;AAAA,EAEjB,SAAS;AAAA,IACP,QAAQ,KAAa,OAAY,cAAc,OAAO;AACpD,UAAI,KAAK,UAAU;AAEjB,aAAK,SAAS,OAAO;AACrB,aAAK,SAAS,cAAc;AAAA;AAAA;AAAA,IAGhC,WAAW,SAAyB,MAAM,OAAO;AAC/C,WAAK,QAAQ,KAAK,SAAS;AAAA;AAAA,IAE7B,cAAc;AACZ,OAAC,SAAS,aAAa,cAAc,OAAO,WAAW,QAAQ,eAAe,QAAQ,OAAK;AAEzF,cAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAC9B,cAAI,MAAM,SAAS;AAEjB,iBAAK,SAAS,MAAM,IAAI;AAAA,iBACnB;AAEL,iBAAK,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,SAAS;AACP,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY;AAAA;AAAA,EAEvD,SAAS;AAAA;MAGE,iBAAiB;AAAA,EAC5B,WAAW,CAAE,MAAM,SAAS,SAAS;AAAA,EAIrC,oBAAoB,CAAE,MAAM,QAAQ,SAAS;AAAA;;ACvF/C,oBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,OACF;AAAA;AAAA,EAEL,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,WAAW,IAAI,kBAAkB,YAAY,KAAK;AACxD,gBAAU,MAAM,OAAO,KAAK,iBAAiB;AAC7C,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AAAA;;ACZX,sBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,OACF;AAAA;AAAA,EAEL,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,WAAW,IAAI,oBAAoB,YAAY,KAAK;AAC1D,gBAAU,MAAM,OAAO,KAAK,iBAAiB;AAC7C,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AAAA;;ACZX,qBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,KAAK;AAAA,IACL,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,aAAa;AAAA;AAAA,EAEf,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,MAAM,KAAK,MAAM,KAAK,MAAM,aAAa,KAAK;AACpD,YAAM,OAAO,YAAY,KAAK,QAAQ,CAAC,OAAO;AAC9C,WAAK,SAAS,IAAI,gBAAgB,KAAK;AACvC,aAAO,IAAI,mBAAmB;AAAA;AAAA;AAAA,EAGlC,SAAS;AAAA;;ACfX,oBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,UAAU,CAAE,MAAM,CAAC,QAAQ,SAAS,SAAS;AAAA,IAC7C,mBAAmB,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC5C,cAAc,CAAE,MAAM,QAAQ,SAAS;AAAA,IACvC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,IACpC,UAAU,CAAE,MAAM,CAAC,QAAQ,SAAS,SAAS;AAAA,IAC7C,aAAa;AAAA,OACV;AAAA;AAAA,EAEL,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,WAAW,IAAI,kBAAkB,YAAY,KAAK;AAGxD,YAAM,aAAa,CAAC,YAAY,qBAAqB,gBAAgB,aAAa;AAClF,iBAAW,QAAQ,OAAK;AAEtB,cAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAC9B,cAAI,MAAM,cAAc,MAAM,YAAY;AACxC,qBAAS,GAAG,IAAI;AAAA,iBACX;AAEL,qBAAS,KAAK;AAAA;AAAA;AAAA;AAIpB,gBAAU,MAAM,OAAO,KAAK,iBAAiB;AAE7C,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AAAA;;AChCX,MAAMlB,UAAQ;AAAA,EACZ,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,EACpC,kBAAkB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC3C,mBAAmB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC5C,UAAU,CAAE,MAAM,CAAC,QAAQ,SAAsC,SAAS;AAAA,EAC1E,mBAAmB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC5C,iBAAiB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC1C,mBAAmB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC5C,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,EACpC,aAAa,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG;AAAA,EAC1F,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,EACpC,iBAAiB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC1C,aAAa;AAAA;AAGf,uBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,OACFA;AAAA,OACA;AAAA;AAAA,EAEL,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,WAAW,IAAI,qBAAqB,YAAY,KAAK,QAAQ,CAAC;AAGpE,aAAO,KAAKA,SAAO,QAAQ,OAAK;AAC9B,YAAI,MAAM;AAAe;AAEzB,cAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAC9B,cAAI,MAAM,YAAY;AACpB,qBAAS,GAAG,IAAI;AAAA,iBACX;AAEL,qBAAS,KAAK;AAAA;AAAA;AAAA;AAKpB,eAAS,MAAM,eAAe;AAC9B,gBAAU,MAAM,OAAO,KAAK,iBAAiB;AAE7C,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AAAA;;AC/CX,uBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,aAAa;AAAA;AAAA,EAEf,SAAS;AAAA,IACP,iBAAiB;AACf,aAAO,IAAI,qBAAqB,YAAY,KAAK;AAAA;AAAA;AAAA,EAGrD,SAAS;AAAA;;ACXX,MAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ5B,MAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAO9B,qBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAO,IAC1C,cAAc,CAAE,MAAM,QAAQ,SAAS;AAAA,IACvC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA;AAAA,EAE3C,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,WAAW,IAAIwB,iBAAe;AAAA,QAClC,UAAU,KAAK;AAAA,QACf,cAAc,KAAK;AAAA,QACnB,gBAAgB,KAAK;AAAA;AAGvB,YAAM,aAAa,CAAC,gBAAgB;AACpC,iBAAW,QAAQ,OAAK;AAEtB,cAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAC9B,eAAK,QAAQ,GAAG,OAAO;AAAA;AAAA;AAI3B,aAAO;AAAA;AAAA,IAET,cAAc;AAAA;AAAA;AAAA,EAEhB,SAAS;AAAA;;AC/BX,oBAAoB,QAAgB,MAAc,SAAiB;AACjE,SAAO,OAAO,MAAM,MAAM,KAAK;AAAA;AAGjC,MAAM,oBAAoB,YAAY,eAAe,MAAM,GAAG,YAAY,eAAe,QAAQ;AACjG,MAAM,oBAAoB,YAAY,eAAe,MAAM,YAAY,eAAe,QAAQ;AAE9F,MAAM,6BAA6B;AAAA,EAEjC,UAAU,cAAc,MAAM;AAAA,IAC5B,UAAU,MAAM;AAAA,IAChB;AAAA,MACE,gBAAgB,CAAE,OAAO,IAAI,MAAM;AAAA,MACnC,qBAAqB,CAAE,OAAO;AAAA,MAC9B,kBAAkB,CAAE,OAAO;AAAA,MAC3B,sBAAsB,CAAE,OAAO;AAAA,MAC/B,gBAAgB,CAAE,OAAO;AAAA,MACzB,gBAAgB,CAAE,OAAO;AAAA;AAAA;AAAA,EAI7B,cAAc;AAAA;AAAA,MAEV,YAAY;AAAA;AAAA,EAGhB,gBAAgB;AAAA;AAAA;AAAA;AAAA,MAIZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBA,kBAAkB,QACpB,oCACA,WACE,YAAY,uBACZ,iEACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AChEN,MAAMxB,UAAQ;AAAA,EACZ,OAAO,CAAE,MAAM,CAAC,QAAQ,SAAsC,SAAS;AAAA,EACvE,gBAAgB,CAAE,MAAM,CAAC,QAAQ,SAAsC,SAAS;AAAA,EAChF,qBAAqB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC9C,kBAAkB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC3C,sBAAsB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC/C,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA;AAG3C,yBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTA;AAAA,EACA,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,SAAS;AACf,YAAM,WAAW,cAAc,MAAM,OAAO;AAE5C,aAAO,KAAKA,SAAO,QAAQ,CAAC,QAAQ;AAElC,cAAM,QAAQ,KAAK;AACnB,YAAI,OAAO,KAAK,SAAS;AACzB,YAAI,CAAC,SAAS,kBAAkB,SAAS,MAAM;AAC7C,cAAI,QAAQ;AAAS,mBAAO;AAC5B,mBAAS,IAAI,MAAM;AAAA;AAErB,iBAAS,MAAM,QAAQ;AAAA;AAGzB,YAAM,WAAW,IAAIwB,iBAAe;AAAA,WAC/B;AAAA,QACH;AAAA,QACA,QAAQ;AAAA,QACR,aAAa,KAAK;AAAA,QAClB,cAAc,KAAK;AAAA;AAGrB,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AAAA;;ACzCX,mBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,OACF;AAAA;AAAA,EAEL,SAAS;AAAA,IACP,iBAAiB;AACf,YAAM,WAAW,IAAI,iBAAiB,YAAY,KAAK;AACvD,gBAAU,MAAM,OAAO,KAAK,iBAAiB;AAC7C,aAAO;AAAA;AAAA;AAAA,EAGX,SAAS;AAAA;;ACNX,cAAe,gBAAgB;AAAA,EAC7B,QAAQ;AAAA,IACN,UAAU;AAAA;AAAA,EAEZ,OAAO;AAAA,IACL,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,IAC/B,SAAS;AAAA,IACT,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,SAAS;AAAA,IAET,SAAS,CAAE,MAAM,QAAQ,SAAS;AAAA,IAClC,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,IAChC,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,IAChC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,IACpC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,IACpC,QAAQ,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG;AAAA,IACrF,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,IACnC,QAAQ,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG;AAAA;AAAA,EAEvF,QAAyB;AACvB,WAAO;AAAA;AAAA,EAET,UAAU;AACR,SAAK;AACL,UAAM,MAAM,KAAK,KAAK,KAAK;AAAA;AAAA,EAE7B,YAAY;AAvCd;AAwCI,eAAK,aAAL,mBAAe,WAAW,MAAM,KAAK;AACrC,eAAK,YAAL,mBAAc;AAAA;AAAA,EAEhB,SAAS;AAAA,IACP,gBAAgB;AACd,UAAI,CAAC,KAAK;AAAK,eAAO;AACtB,YAAM,UAAU,IAAI,gBAAgB,KAAK,KAAK,KAAK,KAAK,UAAU,KAAK,YAAY,KAAK;AAExF,YAAM,YAAY,CAAC,WAAW,SAAS,SAAS,aAAa,aAAa,UAAU,YAAY;AAChG,gBAAU,QAAQ,UAAQ;AAAE,iBAAS,MAAM,MAAM;AAAA;AACjD,aAAO;AAAA;AAAA,IAET,iBAAiB;AACf,WAAK,UAAU,KAAK;AAEpB,UAAI,KAAK,WAAW,KAAK,UAAU;AACjC,aAAK,SAAS,WAAW,KAAK,SAAS,KAAK;AAC5C,YAAI,KAAK,SAAS,oBAAoBA,oBAAkB,KAAK,SAAS;AACpE,UAAC,KAAK,SAAiB,SAAS,KAAK,WAAW,CAAE,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,IAIpE,SAAS,GAAY;AA9DzB;AA+DM,iBAAK,WAAL,8BAAc;AAAA;AAAA;AAAA,EAGlB,SAAS;AAAE,WAAO;AAAA;AAAA;;AC9DpB,kBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,MAAM,CAAE,MAAM,QAAQ,UAAU;AAAA,IAChC,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,MAAM,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU;AAAA;AAAA,IAGpE,SAAS,CAAE,MAAM,QAAQ,SAAS;AAAA;AAAA,EAEpC,UAAU;AACR,UAAM,MAAM,KAAK,MAAM,KAAK;AAC5B,UAAM,MAAM,KAAK,MAAM,KAAK;AAAA;AAAA,EAE9B,SAAS;AAAA,IACP,gBAAgB;AACd,aAAO,IAAI,oBACR,QAAQ,KAAK,MACb,KAAK,KAAK,MAAM,KAAK,UAAU,KAAK,YAAY,KAAK;AAAA;AAAA;AAAA;;ACpB9D,UAAe,cAAc,OAAOxB,SAAOE;;ACA3C,aAAe,cAAc,UAAUF,SAAOE;;ACA9C,WAAe,cAAc,QAAQF,SAAOE;;ACA5C,eAAe,cAAc,YAAYF,SAAOE;;ACAhD,mBAAe,cAAc,gBAAgBF,SAAOE;;ACApD,kBAAe,cAAc,eAAeF,SAAOE;;ACAnD,YAAe,cAAc,SAASF,SAAOE;;ACA7C,iBAAe,cAAc,cAAcF,SAAOE;;ACAlD,YAAe,cAAc,SAASF,SAAOE;;ACA7C,iBAAe,cAAc,cAAcF,SAAOE;;ACAlD,WAAe,cAAc,QAAQF,SAAOE;;ACA5C,aAAe,cAAc,UAAUF,SAAOE;;ACA9C,kBAAe,cAAc,eAAeF,SAAOE;;ACMnD,MAAMF,UAAQ;AAAA,EACZ,MAAM,CAAE,MAAM,QAAQ,UAAU,MAAM,SAAS;AAAA,EAC/C,SAAS,CAAE,MAAM,QAAQ,UAAU;AAAA,EACnC,MAAM,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC/B,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,EAChC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,EACxC,cAAc,CAAE,MAAM,SAAS,SAAS;AAAA,EACxC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA,EACpC,aAAa,CAAE,MAAM,QAAQ,SAAS;AAAA,EACtC,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,EACxC,OAAO,CAAE,MAAM,CAAC,SAAS,SAAuC,SAAS;AAAA;AAG3E,WAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTA;AAAA,EACA,QAA4B;AAC1B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,QAAI,CAAC,KAAK,SAAS;AACjB,cAAQ,MAAM;AACd;AAAA;AAQF,UAAM,aAAa;AAAA,MACjB;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAC1B;AAAA,MAAgB;AAAA,MAAkB;AAAA,MAAa;AAAA,MAAe;AAAA,MAC9D;AAAA;AAEF,eAAW,QAAQ,OAAK;AAEtB,YAAM,MAAM,KAAK,IAAI,MAAM;AACzB,YAAI,KAAK;AAAM,eAAK;AAAA;AAAA;AAIxB,UAAM,SAAS,IAAI;AACnB,SAAK,UAAU;AACf,WAAO,KAAK,KAAK,SAAS,CAAC,SAAS;AAClC,WAAK,UAAU;AACf,WAAK,OAAO;AACZ,WAAK;AACL,WAAK;AAAA;AAAA;AAAA,EAGT,SAAS;AAAA,IACP,iBAAiB;AACf,WAAK,WAAW,IAAI,aAAa,KAAK,MAAM;AAAA,QAE1C,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,QACX,QAAQ,KAAK;AAAA,QACb,OAAO,KAAK;AAAA,QACZ,eAAe,KAAK;AAAA,QACpB,cAAc,KAAK;AAAA,QACnB,gBAAgB,KAAK;AAAA,QACrB,WAAW,KAAK;AAAA,QAChB,aAAa,KAAK;AAAA,QAClB,eAAe,KAAK;AAAA;AAGtB,UAAI,KAAK,UAAU,UAAU;AAC3B,aAAK,SAAS;AAAA;AAAA;AAAA;AAAA;;AC5EtB,YAAe,cAAc,SAASA,SAAOE;;ACA7C,gBAAe,cAAc,aAAaF,SAAOE;;ACEjD,WAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTF;AAAA,EACA,UAAU;AACR,SAAK;AACL,SAAK,oBAAoBA;AAAA;AAAA,EAE3B,SAAS;AAAA,IACP,iBAAiB;AACf,WAAK,WAAW,eAAe;AAAA;AAAA,IAGjC,aAAa,QAAmB;AAC9B,+BAAyB,KAAK,UAA0B;AAAA;AAAA;AAAA,EAG5D,SAAS;AAAA;;ACZX,YAAe,gBAAgB;AAAA,EAC7B,OAAO,CAAC;AAAA,EACR,SAAS;AAAA,EACT,OAAO;AAAA,IACL,KAAK,CAAE,MAAM,QAAQ,UAAU;AAAA,IAC/B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,eAAe,CAAE,MAAM,QAAQ,SAAS;AAAA,IACxC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,IACzC,UAAU;AAAA;AAAA,EAEZ,QAA6B;AAC3B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,SAAK,WAAW,IAAIU,gBAAc,GAAG,GAAG,KAAK,eAAe,KAAK;AACjE,SAAK,WAAW,IAAI,kBAAkB,CAAE,MAAM,YAAY,KAAK,KAAK;AAEpE,UAAM,MAAM,KAAK,KAAK,KAAK;AAE3B,KAAC,SAAS,UAAU,QAAQ,OAAK;AAE/B,YAAM,MAAM,KAAK,IAAI,KAAK;AAAA;AAG5B,SAAK;AACL,QAAI,KAAK;AAAU,WAAK,SAAS,SAAS,KAAK;AAAA;AAAA,EAEjD,YAAY;AAvCd;AAwCI,eAAK,aAAL,mBAAe,UAAU,KAAK;AAAA;AAAA,EAEhC,SAAS;AAAA,IACP,cAAc;AACZ,aAAO,IAAI,gBAAgB,KAAK,KAAK,KAAK,KAAK;AAAA;AAAA,IAEjD,iBAAiB;AA9CrB;AA+CM,iBAAK,YAAL,mBAAc;AACd,UAAI,KAAK,UAAU;AACjB,aAAK,SAAS,MAAM,KAAK;AACzB,aAAK,SAAS,cAAc;AAAA;AAAA;AAAA,IAGhC,SAAS,SAAkB;AACzB,WAAK,UAAU;AACf,WAAK;AACL,WAAK,MAAM,UAAU;AAAA;AAAA,IAEvB,SAAS;AACP,UAAI,CAAC,KAAK,YAAY,CAAC,KAAK;AAAS;AACrC,YAAM,SAAS,KAAK,SAAS;AAC7B,YAAM,KAAK,KAAK,QAAQ,MAAM;AAC9B,YAAM,KAAK,KAAK,QAAQ,MAAM;AAC9B,YAAM,SAAS,KAAK;AACpB,UAAI,IAAI,GAAG,IAAI;AACf,UAAI,KAAK,SAAS,KAAK,QAAQ;AAC7B,YAAI,KAAK,QAAQ,OAAO,SAAS,OAAO;AACxC,YAAI,KAAK,SAAS,OAAO,UAAU,OAAO;AAAA,iBACjC,KAAK,OAAO;AACrB,YAAI,KAAK,QAAQ,OAAO,SAAS,OAAO;AACxC,YAAI,IAAI;AAAA,iBACC,KAAK,QAAQ;AACtB,YAAI,KAAK,SAAS,OAAO,UAAU,OAAO;AAC1C,YAAI,IAAI;AAAA,aACH;AACL,YAAI,SAAS;AAAG,cAAI,IAAI;AAAA;AACnB,cAAI,IAAI;AAAA;AAEf,UAAI,KAAK,MAAM;AACb,aAAK,KAAK,MAAM,IAAI;AACpB,aAAK,KAAK,MAAM,IAAI;AAAA;AAAA;AAAA;AAAA,EAI1B,SAAS;AAAA;;AC/EX,oBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,OAAO,CAAE,MAAM,QAAQ,UAAU;AAAA;AAAA,EAEnC,SAAS;AAAA,IACP,WAAW;AACT,UAAI,CAAC,KAAK;AAAU;AAEpB,UAAI,CAAC,KAAK,YAAY,CAAC,KAAK,UAAU;AACpC,gBAAQ,MAAM;AACd,eAAO;AAAA;AAGT,WAAK,OAAO,IAAIlB,gBAAc,KAAK,UAAU,KAAK,UAAU,KAAK;AACjE,WAAK,KAAK,SAAS,YAAY;AAE/B,eAAS,MAAM,cAAc,KAAK;AAClC,eAAS,MAAM,iBAAiB,KAAK;AAErC,UAAI,KAAK,kBACP,KAAK,iBACL,KAAK,iBACL,KAAK,kBACL,KAAK,iBACL,KAAK,eACL,KAAK,SAAS;AACd,aAAK,SAAS,MAAM,mBAAmB,KAAK;AAAA;AAG9C,WAAK,aAAa,KAAK;AAAA;AAAA;AAAA,EAG3B,SAAS;AAAA;;AC5BX,aAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO,CAAC;AAAA,EACR,OAAO;AAAA,IACL,KAAK,CAAE,MAAM,QAAQ,UAAU;AAAA;AAAA,EAEjC,QAA8B;AAC5B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,SAAK,UAAU,IAAI,gBAAgB,KAAK,KAAK,KAAK,KAAK;AACvD,SAAK,WAAW,IAAI,eAAe,CAAE,KAAK,KAAK;AAC/C,SAAK,SAAS,IAAIiC,SAAO,KAAK;AAC9B,SAAK,aAAa,KAAK;AAAA;AAAA,EAEzB,YAAY;AAzBd;AA0BI,eAAK,YAAL,mBAAc;AACd,eAAK,aAAL,mBAAe;AAAA;AAAA,EAEjB,SAAS;AAAA,IACP,WAAW;AACT,WAAK;AACL,WAAK,MAAM;AAAA;AAAA,IAEb,WAAW;AACT,UAAI,CAAC,KAAK,WAAW,CAAC,KAAK;AAAQ;AAEnC,YAAM,SAAS,KAAK,QAAQ,MAAM;AAClC,YAAM,UAAU,KAAK,QAAQ,MAAM;AACnC,YAAM,SAAS,SAAS;AAExB,UAAI,IAAI,KAAK,IAAI;AACjB,UAAI,SAAS,GAAG;AACd,YAAI,MAAM;AAAA,aACL;AACL,YAAI,MAAM;AAAA;AAGZ,YAAM,YAAY,KAAK,OAAO,SAAS,WAAW,SAAS;AAC3D,gBAAU,KAAK,CAAC;AAAG,gBAAU,KAAK,CAAC;AACnC,gBAAU,KAAK;AAAG,gBAAU,KAAK,CAAC;AAClC,gBAAU,MAAM;AAAG,gBAAU,MAAM;AACnC,gBAAU,MAAM,CAAC;AAAG,gBAAU,MAAM;AACpC,WAAK,OAAO,SAAS,WAAW,SAAS,cAAc;AAAA;AAAA;AAAA,EAG3D,SAAS;AAAA;;ACpDX,YAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO,CAAC,QAAQ,YAAY;AAAA,EAC5B,OAAO;AAAA,IACL,KAAK,CAAE,MAAM,QAAQ,UAAU;AAAA;AAAA,EAEjC,OAAO;AACL,WAAO;AAAA,MACL,UAAU;AAAA;AAAA;AAAA,EAGd,SAAS;AAAA,IACP,OAAO,OAAkB;AACvB,WAAK,MAAM,QAAQ;AACnB,WAAK,aAAa;AAAA;AAAA,IAEpB,WAAW,UAAyB;AAClC,WAAK,WAAW,SAAS,SAAS,SAAS;AAC3C,WAAK,MAAM,YAAY;AAAA;AAAA,IAEzB,QAAQ,OAAmB;AACzB,WAAK,MAAM,SAAS;AAAA;AAAA;AAAA;;ACrB1B,WAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,UAAU;AACR,UAAM,SAAS,IAAI;AACnB,WAAO,KAAK,KAAK,KAAK,CAAC,SAAS;AAC9B,WAAK,OAAO,KAAK;AAAA,OAChB,KAAK,YAAY,KAAK;AAAA;AAAA;;ACN7B,UAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,UAAU;AACR,UAAM,SAAS,IAAI;AACnB,WAAO,KAAK,KAAK,KAAK,CAAC,QAAQ;AAC7B,WAAK,OAAO;AAAA,OACX,KAAK,YAAY,KAAK;AAAA;AAAA;;MCKhB,uBAA8D,OAAO;AAElF,qBAAe,gBAAgB;AAAA,EAC7B,QAAsC;AACpC,UAAM,WAAW,OAAO;AACxB,WAAO,CAAE;AAAA;AAAA,EAEX,UAAU;AACR,WAAO;AAAA,OACJ,uBAAiC;AAAA;AAAA;AAAA,EAGtC,UAAU;AACR,QAAI,CAAC,KAAK,UAAU;AAClB,cAAQ,MAAM;AACd;AAAA;AAEF,UAAM,WAAW,KAAK;AAEtB,UAAM,WAAW,IAAIC,iBAAe,KAAK,SAAS;AAClD,SAAK,WAAW;AAChB,SAAK,SAAS,WAAW;AAGzB,aAAS,YAAY,QAAQ,MAAM;AACjC,eAAS,SAAS,YAAY;AAC9B,WAAK;AACL,eAAS,YAAY,UAAU,KAAK;AAAA;AAAA;AAAA,EAGxC,YAAY;AA7Cd;AA8CI,eAAK,aAAL,mBAAe,eAAe,UAAU,KAAK;AAAA;AAAA,EAE/C,SAAS;AAAA,IACP,QAAQ,MAAY;AAjDxB;AAkDM,iBAAK,aAAL,mBAAe,QAAQ;AAAA;AAAA,IAEzB,WAAW,MAAY;AApD3B;AAqDM,iBAAK,aAAL,mBAAe,WAAW;AAAA;AAAA,IAE5B,SAAS;AACP,UAAI,KAAK,YAAY,KAAK,UAAU;AAClC,aAAK,SAAS,QAAQ,KAAK,SAAS,KAAK,OAAO,KAAK,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA,EAIzE,SAAS;AACP,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY;AAAA;AAAA,EAEvD,SAAS;AAAA;;ACrDX,iBAAe,gBAAgB;AAAA,EAE7B,QAAQ;AAAA,IACN,UAAU;AAAA,IACV,UAAU;AAAA;AAAA,EAEZ,OAAO,CAAC;AAAA,EACR,QAA8B;AAC5B,WAAO;AAAA;AAAA,EAET,UAAU;AACR,QAAI,CAAC,KAAK,UAAU;AAClB,cAAQ,MAAM;AAAA;AAEhB,QAAI,CAAC,KAAK,UAAU;AAClB,cAAQ,MAAM;AAAA;AAAA;AAAA,EAGlB,YAAY;AA7Bd;AA8BI,QAAI,KAAK,MAAM;AACb,iBAAK,aAAL,mBAAe,WAAW,KAAK;AAC/B,MAAC,iBAAK,MAAa,YAAlB;AAAA;AAAA;AAAA,EAGL,SAAS;AAAA,IACP,eAAe,MAAY;AApC/B;AAqCM,WAAK,OAAO;AACZ,iBAAK,aAAL,mBAAe,QAAQ;AACvB,WAAK,MAAM,SAAS;AAAA;AAAA;AAAA,EAGxB,SAAS;AACP,WAAO;AAAA;AAAA,EAET,SAAS;AAAA;;ACzCX,iBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,QAAI,CAAC,KAAK,SAAS,OAAO;AACxB,cAAQ,MAAM;AACd;AAAA;AAEF,QAAI,CAAC,KAAK,SAAS,QAAQ;AACzB,cAAQ,MAAM;AACd;AAAA;AAEF,UAAM,OAAO,IAAIC,aAAW,KAAK,SAAS,OAAO,KAAK,SAAS;AAC/D,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;AChBX,MAAM3B,UAAQ;AAAA,EACZ,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,EAChC,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,EACnC,SAAS,CAAE,MAAM,QAAQ,SAAS;AAAA;AAGpC,gBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTA;AAAA,EACA,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,QAAI,CAAC,KAAK,SAAS,OAAO;AACxB,cAAQ,MAAM;AACd;AAAA;AAEF,QAAI,CAAC,KAAK,SAAS,QAAQ;AACzB,cAAQ,MAAM;AACd;AAAA;AAGF,UAAM,SAAS;AAAA,MACb,OAAO,KAAK;AAAA,MACZ,UAAU,KAAK;AAAA,MACf,SAAS,KAAK;AAAA,MACd,OAAO,KAAK,SAAS,KAAK;AAAA,MAC1B,QAAQ,KAAK,SAAS,KAAK;AAAA;AAG7B,UAAM,OAAO,IAAI4B,YAAU,KAAK,SAAS,OAAO,KAAK,SAAS,QAAQ;AAEtE,WAAO,KAAK5B,SAAO,QAAQ,OAAK;AAE9B,YAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAAE,aAAK,SAAS,GAAG,QAAQ;AAAA;AAAA;AAG7D,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;ACtCX,MAAMA,UAAQ;AAAA,EACZ,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,oBAAoB,CAAE,MAAM,QAAQ,SAAS;AAAA,EAC7C,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA;AAGtC,eAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTA;AAAA,EACA,UAAU;AACR,UAAM,OAAO,IAAI6B,WAAS,KAAK,gBAAgB,KAAK,oBAAoB,KAAK,gBAAgB,KAAK;AAElG,WAAO,KAAK7B,SAAO,QAAQ,OAAK;AAE9B,YAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAAE,aAAK,SAAS,GAAG,QAAQ;AAAA;AAAA;AAG7D,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;AClBX,eAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,UAAU;AARZ;AASI,UAAM,OAAO,IAAI,WAAW;AAG5B,eAAK,aAAL,mBAAe,YAAY,UAAU,KAAK;AAE1C,SAAK,eAAe;AAAA;AAAA,EAEtB,YAAY;AAhBd;AAiBI,eAAK,aAAL,mBAAe,eAAe,UAAU,KAAK;AAAA;AAAA,EAE/C,SAAS;AAAA,IACP,OAAO,CAAE,OAAiC;AACxC,UAAI,KAAK,MAAM;AACb,cAAM,CAAE,cAAgB,KAAK,KAAoB,SAAS;AAC1D,mBAAW,MAAM,IAAI,IAAI,KAAK;AAC9B,mBAAW,MAAM,IAAI,IAAI,KAAK;AAAA;AAAA;AAAA;AAAA,EAIpC,SAAS;AAAA;;ACxBX,MAAMA,UAAQ;AAAA,EACZ,OAAO,CAAE,MAAM,QAAQ,SAAS;AAAA,EAChC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,SAAS,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK,KAAK;AAAA,EACjD,SAAS,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK,KAAK;AAAA,EACjD,SAAS,CAAE,MAAM,QAAQ,SAAS,KAAK,KAAK,KAAK;AAAA,EACjD,SAAS,CAAE,MAAM,QAAQ,SAAS;AAAA;AAGpC,mBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTA;AAAA,EACA,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,OAAO,IAAI8B,eAAa,KAAK,SAAS,KAAK,OAAO,KAAK,SAAS,KAAK,QAAQ;AAEnF,WAAO,KAAK9B,SAAO,QAAQ,OAAK;AAE9B,WAAK,SAAS,GAAG,QAAQ,KAAK;AAE9B,YAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAAE,aAAK,SAAS,GAAG,QAAQ;AAAA;AAAA;AAG7D,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;AC1BX,eAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,OAAO,IAAI+B,WAAS,KAAK,SAAS,KAAK,OAAO,KAAK,SAAS,KAAK;AACvE,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;ACRX,eAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAO;AAAA;AAAA,EAGpB,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,QAAI,CAAC,KAAK,SAAS,OAAO;AACxB,cAAQ,MAAM;AACd;AAAA;AAEF,QAAI,CAAC,KAAK,SAAS,QAAQ;AACzB,cAAQ,MAAM;AACd;AAAA;AAGF,UAAM,OAAO,IAAIC,WACf,KAAK,SAAS,OACd,KAAK,SAAS,QACd,KAAK,SAAS,KAAK,OACnB,KAAK,SAAS,KAAK;AAGrB,WAAO,KAAK,KAAK,SAAS,QAAQ,SAAO;AAEvC,WAAK,OAAO,KAAK,QAAQ;AAAA;AAG3B,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;ACtCX,oBAAe;AAAA,EACb,UAAU;AAAA,EACV,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;ACLlB,gBAAe;AAAA,EACb,UAAU;AAAA,IACR,UAAU,CAAE,OAAO;AAAA,IACnB,YAAY,CAAE,OAAO;AAAA,IACrB,gBAAgB,CAAE,OAAO;AAAA,IACzB,OAAO,CAAE,OAAO,IAAI;AAAA,IACpB,KAAK,CAAE,OAAO,IAAI;AAAA,IAClB,OAAO,CAAE,OAAO,IAAI;AAAA,IACpB,SAAS,CAAE,OAAO,IAAI;AAAA;AAAA,EAExB,cAAc,cAAc;AAAA,EAC5B,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;ACPlB,MAAMhC,UAAQ;AAAA,EACZ,YAAY,CAAE,MAAM,QAAQ,SAAS;AAAA,EACrC,gBAAgB,CAAE,MAAM,QAAQ,SAAS;AAAA,EACzC,OAAO,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,GAAG,GAAG;AAAA,EACpF,KAAK,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,IAAI,GAAG;AAAA;AAUrF,oBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,SACTA;AAAA,EACA,QAAqC;AACnC,WAAO,CAAE,WAAW,IAAI,WAAW;AAAA;AAAA,EAErC,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,SAAK,QAAQ,IAAI,WAAW;AAC5B,SAAK,QAAQ,IAAI,WAAW;AAE5B,UAAM,YAAY,KAAK,YAAY,KAAK,MAAM;AAC9C,UAAM,YAAY,KAAK,YAAY,KAAK,MAAM;AAG9C,cAAU,aAAa,UAAU;AACjC,cAAU,iBAAiB,UAAU;AACrC,cAAU,QAAQ,UAAU;AAC5B,cAAU,MAAM,UAAU;AAC1B,cAAU,UAAU,UAAU;AAE9B,aAAS,MAAM,cAAc,UAAU,YAAY;AACnD,aAAS,MAAM,kBAAkB,UAAU,gBAAgB;AAE3D,SAAK;AAEL,KAAC,SAAS,OAAO,QAAQ,OAAK;AAE5B,YAAM,MAAM,KAAK,IAAI,KAAK,iBAAiB,CAAE,MAAM;AAAA;AAGrD,SAAK,MAAM,UAAU,CAAC,OAAe,WAAmB;AACtD,gBAAU,QAAQ,MAAM,IAAI,OAAO;AAAA;AAGrC,SAAK,eAAe,KAAK;AACzB,SAAK,SAAS,QAAQ,KAAK;AAAA;AAAA,EAE7B,YAAY;AACV,QAAI,KAAK,YAAY,KAAK;AAAO,WAAK,SAAS,WAAW,KAAK;AAAA;AAAA,EAEjE,SAAS;AAAA,IACP,kBAAkB;AAChB,WAAK,UAAU,MAAM,MAAM,KAAK,KAAK;AACrC,WAAK,UAAU,IAAI,MAAM,KAAK,KAAK;AACnC,YAAM,KAAK,IAAI,UAAU,KAAK,KAAK,KAAgB,IAAI,KAAK,OAAkB;AAC9E,WAAK,UAAU,MAAM,MAAM,KAAK;AAChC,WAAK,UAAU,MAAM,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG;AAAA;AAAA;AAAA,EAG7C,SAAS;AAAA;;ACpEX,MAAM,QAAQ;AAAA,EACZ,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA,EACnC,QAAQ,CAAE,MAAM,QAAQ,SAAS;AAAA,EACjC,WAAW,CAAE,MAAM,QAAQ,SAAS;AAAA;AAGtC,sBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT;AAAA,EACA,UAAU;AACR,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,OAAO,IAAI,QAAQ,KAAK,SAAS,KAAK,OAAO,KAAK,SAAS,KAAK;AACtE,UAAM,OAAO,IAAIiC,kBAAgB,MAAM,KAAK,UAAU,KAAK,QAAQ,KAAK;AAExE,WAAO,KAAK,OAAO,QAAQ,OAAK;AAE9B,YAAM,MAAM,KAAK,IAAI,CAAC,UAAU;AAAE,aAAK,SAAS,GAAG,QAAQ;AAAA;AAAA;AAG7D,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;ACvBX,eAAe;AAAA,EACb,UAAU;AAAA,IACR,UAAU,CAAE,OAAO;AAAA,IACnB,QAAQ,CAAE,OAAO,IAAI,QAAQ,KAAK;AAAA,IAClC,UAAU,CAAE,OAAO;AAAA;AAAA,EAErB,cAAc,cAAc;AAAA,EAC5B,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;ACJlB,mBAAe,gBAAgB;AAAA,EAC7B,SAAS;AAAA,EACT,OAAO;AAAA,IACL,QAAQ,CAAE,MAAM,QAA0C,SAAS,QAAS,GAAG,KAAK,GAAG;AAAA,IACvF,UAAU,CAAE,MAAM,QAAQ,SAAS;AAAA;AAAA,EAErC,UAAU;AACR,UAAM,OAAO,IAAI,WAAW;AAE5B,aAAS,MAAM,UAAU,KAAK,SAAS,QAAQ;AAC/C,aAAS,MAAM,YAAY,KAAK,SAAS,UAAU;AAEnD,SAAK,eAAe;AAAA;AAAA,EAEtB,SAAS;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MClBE,mBAAmB;AAAA,EAC9B,QAAQ,KAAgB;AACtB,UAAM,QAAQ;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MAEA;AAAA,MAEA;AAAA,MAAO;AAAA,MACP;AAAA,MAAU;AAAA,MACV;AAAA,MAAQ;AAAA,MACR;AAAA,MAAY;AAAA,MACZ;AAAA,MAAgB;AAAA,MAChB;AAAA,MAAe;AAAA,MACf;AAAA,MAAS;AAAA,MACT;AAAA,MAAc;AAAA,MACd;AAAA,MAAS;AAAA,MACT;AAAA,MAAc;AAAA,MACd;AAAA,MAAQ;AAAA,MACR;AAAA,MAAU;AAAA,MACV;AAAA,MAAe;AAAA,MACf;AAAA,MACA;AAAA,MAAS;AAAA,MACT;AAAA,MAAa;AAAA,MACb;AAAA,MAAQ;AAAA,MAER;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MAEA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAEA;AAAA;AAGF,UAAM,QAAQ,UAAQ;AAEpB,UAAI,UAAU,MAAM,MAAM;AAAA;AAAA;AAAA;mBAKN,QAAkB;AAC1C,SAAOC,YAAW,QAAQ,IAAI;AAAA;;uBCtEyB;AACvD,QAAM,MAAyB;AAAA,IAC7B,QAAQ,IAAI;AAAA,IACZ,OAAO;AAAA,IACP,UAAU;AAAA,IACV,cAAc;AAAA,IACd;AAAA,IACA;AAAA;AAEF,SAAO;AAEP,wBAAsB,QAAkC,IAAiB;AACvE,QAAI,QAAQ,OAAO;AACnB,QAAI,SAAS,OAAO;AACpB,QAAI,eAAe;AACnB,YAAQ,IAAI,OAAO,IAAI,cAAc,KAAK;AAAA;AAG5C,uBAAqB,KAA6B,OAAe;AAC/D,WAAO,IAAI,QAAQ,aAAW;AAC5B,UAAI,OAAO,KACT,IAAI,KACJ,aAAW;AACT,YAAI,gBAAgB,IAAI,IAAI;AAC5B,YAAI,SAAS,SAAS;AACtB,gBAAQ;AAAA;AAAA;AAAA;AAMhB,qBAAmB;AACjB,QAAI,SAAS,QAAQ,OAAK,EAAE;AAAA;AAAA;;;;"}